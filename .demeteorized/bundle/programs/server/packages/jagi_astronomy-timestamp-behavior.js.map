{"version":3,"sources":["meteor://ðŸ’»app/packages/jagi_astronomy-timestamp-behavior/lib/behavior/events.js","meteor://ðŸ’»app/packages/jagi_astronomy-timestamp-behavior/lib/behavior/behavior.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/packages/jagi_astronomy-timestamp-behavior.js","sourcesContent":["events = {};\n\nevents.beforeInsert = function() {\n  var doc = this;\n  var Class = doc.constructor;\n  Class.getBehavior('timestamp').setCreationDate(doc);\n};\n\nevents.beforeUpdate = function() {\n  var doc = this;\n  var Class = doc.constructor;\n  Class.getBehavior('timestamp').setModificationDate(doc);\n};\n","Astro.createBehavior({\n  name: 'timestamp',\n  methods: {\n    setCreationDate: function(doc) {\n      var Class = doc.constructor;\n\n      // Find a class on which the behavior had been set.\n      var classBehavior = Class.getBehavior('timestamp');\n      var options = classBehavior.options;\n\n      // Get current date.\n      var date = new Date();\n\n      // If the \"hasCreatedField\" option is set.\n      if (options.hasCreatedField) {\n        // Set value for created field.\n        doc.set(options.createdFieldName, date);\n      }\n\n      if (options.hasUpdatedField) {\n        // Set value for the \"updatedAt\" field.\n        doc.set(options.updatedFieldName, date);\n      }\n    },\n    setModificationDate: function(doc) {\n      var Class = doc.constructor;\n\n      // Find a class on which the behavior had been set.\n      var classBehavior = Class.getBehavior('timestamp');\n      var options = classBehavior.options;\n\n      // If the \"hasUpdatedField\" option is set.\n      if (options.hasUpdatedField) {\n        // We only set the \"updatedAt\" field if there are any changes.\n        if (_.size(doc.getModified())) {\n          // Set value for the \"updatedAt\" field.\n          doc.set(options.updatedFieldName, new Date());\n        }\n      }\n    }\n  },\n  options: {\n    hasCreatedField: true,\n    createdFieldName: 'createdAt',\n    hasUpdatedField: true,\n    updatedFieldName: 'updatedAt'\n  },\n  createSchemaDefinition: function(options) {\n    var schemaDefinition = {\n      fields: {},\n      events: events\n    };\n\n    if (options.hasCreatedField) {\n      // Add a field for storing a creation date.\n      schemaDefinition.fields[options.createdFieldName] = {\n        type: 'date',\n        immutable: true,\n        default: null\n      };\n    }\n\n    if (options.hasUpdatedField) {\n      // Add a field for storing an update date.\n      schemaDefinition.fields[options.updatedFieldName] = {\n        type: 'date',\n        optional: true,\n        default: null\n      };\n    }\n\n    return schemaDefinition;\n  }\n});\n"]}