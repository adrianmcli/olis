{"version":3,"sources":["meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/module/global.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/module/validation_error.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/module/validation_error_event.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/module/validator.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/module/field_validator.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/module/create_validator.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/module/validate.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/module/get_error.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/module/ejson.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/module/init_class.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/module/init_definition.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/type/string.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/type/number.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/type/boolean.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/type/array.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/type/object.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/type/date.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/type/email.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/existence/required.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/existence/null.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/existence/not_null.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/size/length.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/size/min_length.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/size/max_length.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/size/gt.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/size/gte.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/size/lt.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/size/lte.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/comparison/choice.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/comparison/unique.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/comparison/equal.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/comparison/equal_to.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/comparison/regexp.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/logical/and.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/logical/or.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/logical/if.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/logical/switch.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/nested/every.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/nested/has.js","meteor://ðŸ’»app/packages/jagi_astronomy-validators/lib/validators/nested/contains.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC3IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC7HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACvrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/packages/jagi_astronomy-validators.js","sourcesContent":["Astro.validators = Validators = {};\n","var ValidationError =\nAstro.ValidationError = function ValidationError(data) {\n  this.name = 'ValidationError';\n  this.stack = (new Error()).stack;\n  this.document = data.document;\n  this.fieldValidator = data.fieldValidator;\n  this.fieldName = data.fieldName;\n  this.fieldValue = data.fieldValue;\n  this.param = data.param;\n};\n\nValidationError.prototype = Object.create(Error.prototype);\n\nValidationError.prototype.generateMessage = function() {\n  var doc = this.document;\n  var Class = doc.constructor;\n\n  if (this.fieldValidator.message) {\n    // Use the user defined error message in a field validator.\n    return this.fieldValidator.message;\n  }\n\n  // Prepare an event object for the \"validationError\" event.\n  var event = new Astro.ValidationErrorEvent({\n    validator: this.fieldValidator.validator,\n    fieldValue: this.fieldValue,\n    fieldName: this.fieldName,\n    param: this.param,\n    message: this.message\n  });\n  event.target = doc;\n\n  // Generate an error message using the \"validationError\" event.\n  Class.emitEvent(event);\n  var message = event.getMessage();\n  if (event.stopped) {\n    return message;\n  }\n\n  // Get a default validation error by executing the \"validatioError\" event on\n  // the validator.\n  this.fieldValidator.validator.emit(event);\n  var message = event.getMessage();\n  if (message) {\n    return message;\n  }\n\n  // Default validation error.\n  return 'The value of the \"' + this.fieldName + '\" field is invalid';\n};\n","Astro.ValidationErrorEvent = function(data) {\n  var type = 'validationError';\n  data = _.extend({\n    validator: null,\n    fieldName: null,\n    fieldValue: null,\n    param: null,\n    message: null\n  }, data);\n\n  Astro.Event.call(this, type, data);\n};\n\nAstro.utils.class.inherits(Astro.ValidationErrorEvent, Astro.Event);\n\nAstro.ValidationErrorEvent.prototype.setMessage = function(message) {\n  this.data.message = message;\n};\n\nAstro.ValidationErrorEvent.prototype.getMessage = function() {\n  return this.data.message;\n};\n","var checkValidatorDefinition = function(validatorDefinition) {\n  // Check if the validator definition is an object.\n  if (!Match.test(validatorDefinition, Object)) {\n    throw new Error(\n      'The validator definition has to be an object'\n    );\n  }\n  // Check if the validator name is provided.\n  if (!_.has(validatorDefinition, 'name')) {\n    throw new Error(\n      'Provide a validator name'\n    );\n  }\n  // Check if the validator name is a string.\n  if (!Match.test(validatorDefinition.name, String)) {\n    throw new Error(\n      'The validator name has to be a string'\n    );\n  }\n  // Check if the validator with the given name already exists.\n  if (_.has(Validators, validatorDefinition.name)) {\n    throw new Error(\n      'Validator with the name \"' + validatorDefinition.name +\n      '\" is already defined'\n    );\n  }\n  // Check if the validation function is provided.\n  if (!_.has(validatorDefinition, 'validate')) {\n    throw new Error(\n      'Provide the \"validate\" function'\n    );\n  }\n  // Check if the \"validate\" attribute is function.\n  if (!Match.test(validatorDefinition.validate, Function)) {\n    throw new Error(\n      'The \"validate\" attribute has to be a function'\n    );\n  }\n};\n\nvar Validator = Astro.Validator = function Validator(validatorDefinition) {\n  checkValidatorDefinition.apply(this, arguments);\n  var self = this;\n\n  self.name = validatorDefinition.name;\n  self.validate = validatorDefinition.validate;\n\n  if (_.has(validatorDefinition, 'events')) {\n    _.each(validatorDefinition.events, function(eventHandler, eventName) {\n      self.on(eventName, eventHandler);\n    });\n  }\n};\n\nValidator.prototype.createFieldValidatorGenerator = function() {\n  var self = this;\n\n  return function fieldValidatorGenerator(param, message) {\n    return new Astro.FieldValidator({\n      validator: self,\n      param: param,\n      message: message\n    });\n  };\n};\n\nAstro.Events.mixin(Validator.prototype);\n","var FieldValidator =\nAstro.FieldValidator = function FieldValidator(fieldValidatorDefinition) {\n  var self = this;\n\n  // self.name = fieldValidatorDefinition.validator.name;\n  self.validator = fieldValidatorDefinition.validator;\n  self.param = fieldValidatorDefinition.param;\n  self.message = fieldValidatorDefinition.message;\n};\n\nFieldValidator.prototype.validate = function(doc, fieldName, fieldValue) {\n  var self = this;\n\n  // If a function was passed as a validator's param, then it may mean that we\n  // want it to evalute to some value.\n  var param = _.isFunction(self.param) ? self.param.call(doc) : self.param;\n\n  if (!self.validator.validate.call(doc, fieldValue, fieldName, param)) {\n    // Throw error.\n    throw new Astro.ValidationError({\n      document: doc,\n      fieldValidator: self,\n      fieldName: fieldName,\n      fieldValue: fieldValue,\n      param: param\n    });\n  }\n\n  return true;\n};\n","Astro.createValidator = function(validatorDefinition) {\n  var validator = new Astro.Validator(validatorDefinition);\n  Validators[validator.name] = validator.createFieldValidatorGenerator();\n\n  return Validators[validator.name];\n};\n","var methods = {};\n\nmethods._validateOne = function(fieldName, stopOnFirstError) {\n  var doc = this;\n  var result = true;\n\n  Astro.utils.fields.traverseNestedDocs(\n    doc,\n    fieldName,\n    function(nestedDoc, nestedFieldName, Class, field, index) {\n      // Get value of the field.\n      var nestedFieldValue = nestedDoc.get(nestedFieldName);\n\n      // If value of the field is optional and it's null, then we passed\n      // validation. Clear any existing error\n      if (_.isNull(nestedFieldValue) && field.optional) {\n        nestedDoc._errors.delete(nestedFieldName);\n        return;\n      }\n\n      try {\n        // Get a validator for the given field name and run validation if it\n        // exists.\n        var nestedFieldValidator = Class.getValidator(nestedFieldName);\n        if (nestedFieldValidator) {\n          nestedFieldValidator.validate(\n            nestedDoc,\n            nestedFieldName,\n            nestedFieldValue\n          );\n        }\n\n        // Remove a validator error message when no error occured.\n        nestedDoc._errors.delete(nestedFieldName);\n\n        // Depending on the nested field type execute validation on the nested\n        // values. The nested field has also have defined class.\n        if (nestedFieldValue && field.class) {\n          if (field instanceof Astro.fields.object) {\n            result = nestedFieldValue.validate(stopOnFirstError);\n          } else if (field instanceof Astro.fields.array) {\n            if (stopOnFirstError) {\n              result = _.every(nestedFieldValue, function(nestedDoc) {\n                if (nestedDoc) {\n                  return nestedDoc.validate(stopOnFirstError);\n                }\n                return true;\n              });\n            } else {\n              _.each(nestedFieldValue, function(nestedDoc) {\n                if (nestedDoc && !nestedDoc.validate(stopOnFirstError)) {\n                  result = false;\n                }\n              });\n            }\n          }\n        }\n      } catch (e) {\n        // If the error is not an instance of the Astro.ValidationError then\n        // throw error again.\n        if (!(e instanceof Astro.ValidationError)) {\n          throw e;\n        }\n\n        // Generate an error message from the validator that didn't pass.\n        var errorMessage = e.generateMessage();\n\n        // Set validation error for the field.\n        nestedDoc._errors.set(nestedFieldName, errorMessage);\n\n        result = false;\n      }\n    }\n  );\n\n  return result;\n};\n\nmethods._validateMany = function(fieldsNames, stopOnFirstError) {\n  var doc = this;\n  var Class = doc.constructor;\n\n  // Run validation for each field. If the \"stopOnFirstError\" flag is set, then\n  // we stop validating after the first error. Otherwise, we continue until we\n  // reach the last validator.\n  if (stopOnFirstError) {\n    return _.every(fieldsNames, function(fieldName) {\n      return doc._validateOne(fieldName, stopOnFirstError);\n    });\n  } else {\n    var valid = true;\n    _.each(fieldsNames, function(fieldName) {\n      if (!doc._validateOne(fieldName, stopOnFirstError)) {\n        valid = false;\n      }\n    });\n    return valid;\n  }\n};\n\n// Public.\n\nmethods.validate = function(fieldsNames, stopOnFirstError) {\n  var doc = this;\n  var Class = doc.constructor;\n\n  if (arguments.length === 0) {\n\n    // Get list of all fields in the proper validation order.\n    fieldsNames = Class.getValidationOrder();\n\n  } else if (arguments.length === 1) {\n\n    if (_.isString(fieldsNames)) {\n      fieldsNames = [fieldsNames];\n    } else if (_.isBoolean(fieldsNames)) {\n      // Rewrite value of the \"fieldsNames\" argument into the\n      // \"stopOnFirstError\" argument.\n      stopOnFirstError = fieldsNames;\n      // Get list of all validators.\n      fieldsNames = Class.getValidationOrder();\n    }\n\n  } else if (arguments.length === 2) {\n\n    if (_.isString(fieldsNames)) {\n      fieldsNames = [fieldsNames];\n    }\n\n  }\n\n  // Set default value of the \"stopOnFirstError\" argument.\n  if (_.isUndefined(stopOnFirstError)) {\n    stopOnFirstError = true;\n  }\n\n  return doc._validateMany(fieldsNames, stopOnFirstError);\n};\n\n_.extend(Astro.BaseClass.prototype, methods);\n","var methods = {};\n\nmethods.getValidationError = function(fieldName) {\n  var doc = this;\n  var error;\n\n  Astro.utils.fields.traverseNestedDocs(\n    doc,\n    fieldName,\n    function(nestedDoc, nestedFieldName, Class, field, index) {\n      if (nestedDoc instanceof Astro.BaseClass) {\n        error = nestedDoc._errors.get(nestedFieldName);\n      }\n    }\n  );\n\n  return error;\n};\n\nmethods.getValidationErrors = function() {\n  var doc = this;\n  var Class = doc.constructor;\n\n  var errors = this._errors.all();\n  var fields = Class.getFields();\n  _.each(fields, function(field, fieldName) {\n    if (doc[fieldName] && field.class) {\n      if (field instanceof Astro.fields.object) {\n        var nestedErrors = doc[fieldName].getValidationErrors();\n        _.each(nestedErrors, function(nestedError, nestedFieldName) {\n          errors[fieldName + '.' + nestedFieldName] = nestedError;\n        });\n      } else if (field instanceof Astro.fields.array) {\n        _.each(doc[fieldName], function(nestedDoc, index) {\n          if (nestedDoc) {\n            var nestedErrors = nestedDoc.getValidationErrors();\n            _.each(nestedErrors, function(nestedError, nestedFieldName) {\n              errors[\n                fieldName + '.' + index + '.' + nestedFieldName\n              ] = nestedError;\n            });\n          }\n        });\n      }\n    }\n  });\n\n  return errors;\n};\n\nmethods.hasValidationError = function(fieldName) {\n  var doc = this;\n  var has;\n\n  Astro.utils.fields.traverseNestedDocs(\n    doc,\n    fieldName,\n    function(nestedDoc, nestedFieldName, Class, field, index) {\n      if (nestedDoc instanceof Astro.BaseClass) {\n        has = nestedDoc._errors.has(nestedFieldName);\n      }\n    }\n  );\n\n  return has;\n};\n\nmethods.hasValidationErrors = function() {\n  var errors = this.getValidationErrors();\n  return _.size(errors) > 0;\n};\n\nmethods.clearValidationErrors = function() {\n  var doc = this;\n  var Class = doc.constructor;\n\n  doc._errors.clear();\n\n  var fields = Class.getFields();\n  _.each(fields, function(field, fieldName) {\n    if (\n      doc[fieldName] && field instanceof Astro.fields.object && field.class\n    ) {\n      doc[fieldName]._errors.clear();\n    } else if (\n      doc[fieldName] && field instanceof Astro.fields.array && field.class\n    ) {\n      _.each(doc[fieldName], function(nestedDoc, index) {\n        if (nestedDoc instanceof Astro.BaseClass) {\n          nestedDoc._errors.clear();\n        }\n      });\n    }\n  });\n};\n\nmethods.throwValidationException = function() {\n  throw new Meteor.Error('validation-error', this.getValidationErrors());\n};\n\nmethods.catchValidationException = function(exception) {\n  if (!(exception instanceof Meteor.Error) ||\n    exception.error !== 'validation-error' ||\n    !_.isObject(exception.reason)\n  ) {\n    return false;\n  }\n\n  var doc = this;\n  var errors = exception.reason;\n\n  _.each(errors, function(error, fieldName) {\n    Astro.utils.fields.traverseNestedDocs(\n      doc,\n      fieldName,\n      function(nestedDoc, nestedFieldName, Class, field, index) {\n        if (nestedDoc instanceof Astro.BaseClass) {\n          nestedDoc._errors.set(nestedFieldName, error);\n        }\n      }\n    );\n  });\n  return true;\n};\n\n_.extend(Astro.BaseClass.prototype, methods);\n","var events = {};\n\nevents.toJSONValue = function(e) {\n  var doc = this;\n  var json;\n\n  Tracker.nonreactive(function() {\n    json = {\n      errors: doc._errors.all()\n    }\n  });\n\n  _.extend(e.data, json);\n};\n\nevents.fromJSONValue = function(e) {\n  var doc = this;\n  var json = e.data;\n\n  doc._errors.set(json.errors);\n};\n\nAstro.eventManager.on('toJSONValue', events.toJSONValue);\nAstro.eventManager.on('fromJSONValue', events.fromJSONValue);\n","var checkFieldName = function(fieldName) {\n  if (!this.hasField(fieldName)) {\n    throw new Error(\n      'The \"' + fieldName +\n      '\" field does not exist in the \"' + this.getName() + '\" class'\n    );\n  }\n};\n\nvar checkValidator = function(fieldName, validator) {\n  if (!Match.test(\n    validator,\n    Match.OneOf(Function, Astro.FieldValidator, [Astro.FieldValidator])\n  )) {\n    throw new TypeError(\n      'The validator for the \"' + fieldName +\n      '\" field in the \"' + this.getName() + '\" class schema has to be a ' +\n      'function or an array of validators or a single validator object'\n    );\n  }\n};\n\nvar checkValidatorsList = function(validators) {\n  if (!Match.test(validators, Object)) {\n    throw new TypeError(\n      'The validators definitions in the \"' + this.getName() +\n      '\" class schema has to be an object'\n    );\n  }\n};\n\nvar checkValidationOrder = function(validationOrder) {\n  if (!Match.test(validationOrder, [String])) {\n    throw new TypeError(\n      'The validation order definition in the \"' + this.getName() +\n      '\" class schema has to be an array of fields names'\n    );\n  }\n};\n\nvar classMethods = {\n  getValidator: function(fieldName) {\n    return this.schema.validators[fieldName];\n  },\n\n  getValidators: function(fieldsNames) {\n    if (_.isArray(fieldsNames)) {\n      return _.pick(this.schema.validators, fieldsNames);\n    }\n    return this.schema.validators;\n  },\n\n  getValidationOrder: function() {\n    var Class = this;\n\n    // Create a list of all fields where the fields from the validation order\n    // are at the beginning.\n    var order = Class.schema.validationOrder;\n    if (order) {\n      // Get a list of all fields in the class.\n      var allFieldsNames = Class.getFieldsNames();\n      // Detect what fields are not in the validation order.\n      var diff = _.difference(allFieldsNames, order);\n      // If not all fields had been included in the validation order, then add\n      // them at the and.\n      if (diff.length > 0) {\n        order = order.concat(diff);\n      }\n    } else {\n      order = Class.getFieldsNames();\n    }\n\n    return order;\n  }\n};\n\nvar events = {};\n\nevents.afterSet = function(e) {\n  var fieldName = e.data.fieldName;\n\n  // If a validator is defined for given field then clear error message for\n  // that field.\n  if (this._errors) {\n    this._errors.delete(fieldName);\n  }\n};\n\nevents.beforeInit = function() {\n  var doc = this;\n\n  doc._errors = new ReactiveMap();\n};\n\nAstro.eventManager.on('afterSet', events.afterSet);\nAstro.eventManager.on('beforeInit', events.beforeInit)\n\nAstro.eventManager.on(\n  'initClass', function onInitClassValidators() {\n    var Class = this;\n    var schema = Class.schema;\n\n    _.extend(Class, classMethods);\n\n    schema.validators = schema.validators || {};\n  }\n);\n","var checkValidator = function(\n  validator, fieldName, className\n) {\n  if (!Match.test(\n    validator,\n    Match.OneOf(Astro.FieldValidator, [Astro.FieldValidator])\n  )) {\n    throw new TypeError(\n      'The validator for the \"' + fieldName +\n      '\" field in the \"' + className + '\" class schema has to be a ' +\n      'function, an array of validators or a single validator'\n    );\n  }\n};\n\nAstro.eventManager.on(\n  'initDefinition', function onInitDefinitionValidators(schemaDefinition) {\n    var Class = this;\n    var schema = Class.schema;\n    var validatorsDefinitions = {};\n    var validationOrder;\n\n    if (_.has(schemaDefinition, 'validationOrder')) {\n      validationOrder = [].concat(schemaDefinition.validationOrder);\n    }\n\n    if (_.has(schemaDefinition, 'fields')) {\n      _.each(schemaDefinition.fields, function(fieldDefinition, fieldName) {\n        if (_.has(fieldDefinition, 'validator')) {\n          var validator = fieldDefinition.validator;\n\n          if (_.isArray(validator)) {\n            validator = Validators.and(validator);\n          }\n\n          if (validator) {\n            // Check validity of the validator definition.\n            checkValidator(validator, fieldName, Class.getName());\n            validatorsDefinitions[fieldName] = validator;\n          }\n        }\n      });\n    }\n\n    if (_.has(schemaDefinition, 'validators')) {\n      _.each(schemaDefinition.validators, function(validator, fieldName) {\n        var validator;\n\n        if (_.isArray(validator)) {\n          validator = Validators.and(validator);\n        }\n\n        if (validator) {\n          // Check validity of the validator definition.\n          checkValidator(validator, fieldName, Class.getName());\n          validatorsDefinitions[fieldName] = validator;\n        }\n      });\n    }\n\n    if (_.size(validatorsDefinitions) > 0) {\n      // Add validators to the schema.\n      _.extend(schema.validators, validatorsDefinitions);\n    }\n    if (validationOrder) {\n      // Add validation order to the schema.\n      schema.validationOrder = validationOrder;\n    }\n  }\n);\n","Astro.createValidator({\n  name: 'string',\n  validate: _.isString,\n  events: {\n    validationError: function(e) {\n      var fieldName = e.data.fieldName;\n\n      e.setMessage(\n        'The value of the \"' + fieldName + '\" field has to be a string'\n      );\n    }\n  }\n});\n","Astro.createValidator({\n  name: 'number',\n  validate: function(fieldValue) {\n    return _.isNumber(fieldValue) && !_.isNaN(fieldValue);\n  },\n  events: {\n    validationerror: function(e) {\n      var fieldName = e.data.fieldName;\n\n      e.setMessage(\n        'The value of the \"' + fieldName + '\" field has to be a number'\n      );\n    }\n  }\n});\n","Astro.createValidator({\n  name: 'boolean',\n  validate: _.isBoolean,\n  events: {\n    validationerror: function(e) {\n      var fieldName = e.data.fieldName;\n\n      e.setMessage(\n        'The value of the \"' + fieldName + '\" field has to be a boolean'\n      );\n    }\n  }\n});\n","Astro.createValidator({\n  name: 'array',\n  validate: _.isArray,\n  events: {\n    validationerror: function(e) {\n      var fieldName = e.data.fieldName;\n\n      e.setMessage(\n        'The value of the \"' + fieldName + '\" field has to be an array'\n      );\n    }\n  }\n});\n","Astro.createValidator({\n  name: 'object',\n  validate: _.isObject,\n  events: {\n    validationerror: function(e) {\n      var fieldName = e.data.fieldName;\n\n      e.setMessage(\n        'The value of the \"' + fieldName + '\" field has to be an object'\n      );\n    }\n  }\n});\n","Astro.createValidator({\n  name: 'date',\n  validate: function(fieldValue) {\n    return _.isDate(fieldValue) && !_.isNaN(fieldValue.valueOf());\n  },\n  events: {\n    validationerror: function(e) {\n      var fieldName = e.data.fieldName;\n\n      e.setMessage(\n        'The value of the \"' + fieldName + '\" field has to be a date'\n      );\n    }\n  }\n});\n","Astro.createValidator({\n  name: 'email',\n  validate: function(fieldValue) {\n    // Create email regular expression.\n    var re = /^[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\\.)+[A-Z]{2,}$/i;\n\n    return re.test(fieldValue);\n  },\n  events: {\n    validationerror: function(e) {\n      var fieldName = e.data.fieldName;\n\n      e.setMessage(\n        'The value of the \"' + fieldName +\n        '\" field has to be an appropiate email address'\n      );\n    }\n  }\n});\n","Astro.createValidator({\n  name: 'required',\n  validate: function(fieldValue) {\n    return !_.isNull(fieldValue) && fieldValue !== '';\n  },\n  events: {\n    validationerror: function(e) {\n      var fieldName = e.data.fieldName;\n\n      e.setMessage(\n        'The value of the \"' + fieldName + '\" field is required'\n      );\n    }\n  }\n});\n","Astro.createValidator({\n  name: 'null',\n  validate: _.isNull,\n  events: {\n    validationerror: function(e) {\n      var fieldName = e.data.fieldName;\n\n      e.setMessage(\n        'The value of the \"' + fieldName + '\" field has to be null'\n      );\n    }\n  }\n});\n","Astro.createValidator({\n  name: 'notNull',\n  validate: function(fieldValue) {\n    return !_.isNull(fieldValue);\n  },\n  events: {\n    validationerror: function(e) {\n      var fieldName = e.data.fieldName;\n\n      e.setMessage(\n        'The value of the \"' + fieldName + '\" field can not be null'\n      );\n    }\n  }\n});\n","Astro.createValidator({\n  name: 'length',\n  validate: function(fieldValue, fieldName, length) {\n    if (_.isNull(fieldValue) || !_.has(fieldValue, 'length')) {\n      return false;\n    }\n\n    return fieldValue.length === length;\n  },\n  events: {\n    validationerror: function(e) {\n      var fieldName = e.data.fieldName;\n      var length = e.data.param;\n\n      e.setMessage(\n        'The length of the value of the \"' + fieldName +\n        '\" field has to be ' + length\n      );\n    }\n  }\n});\n","Astro.createValidator({\n  name: 'minLength',\n  validate: function(fieldValue, fieldName, minLength) {\n    if (_.isNull(fieldValue) || !_.has(fieldValue, 'length')) {\n      return false;\n    }\n\n    return fieldValue.length >= minLength;\n  },\n  events: {\n    validationerror: function(e) {\n      var fieldName = e.data.fieldName;\n      var minLength = e.data.param;\n\n      e.setMessage(\n        'The length of the value of the \"' + fieldName +\n        '\" field has to be at least ' + minLength\n      );\n    }\n  }\n});\n","Astro.createValidator({\n  name: 'maxLength',\n  validate: function(fieldValue, fieldName, maxLength) {\n    if (_.isNull(fieldValue) || !_.has(fieldValue, 'length')) {\n      return false;\n    }\n\n    return fieldValue.length <= maxLength;\n  },\n  events: {\n    validationerror: function(e) {\n      var fieldName = e.data.fieldName;\n      var maxLength = e.data.param;\n\n      e.setMessage(\n        'The length of the value of the \"' + fieldName +\n        '\" field has to be at most ' + maxLength\n      );\n    }\n  }\n});\n","Astro.createValidator({\n  name: 'gt',\n  validate: function(fieldValue, fieldName, compareValue) {\n    return fieldValue > compareValue;\n  },\n  events: {\n    validationerror: function(e) {\n      var fieldName = e.data.fieldName;\n      var compareValue = e.data.param;\n\n      e.setMessage(\n        'The value of the \"' + fieldName +\n        '\" field has to be greater than \"' + compareValue + '\"'\n      );\n    }\n  }\n});\n","Astro.createValidator({\n  name: 'gte',\n  validate: function(fieldValue, fieldName, compareValue) {\n    return fieldValue >= compareValue;\n  },\n  events: {\n    validationerror: function(e) {\n      var fieldName = e.data.fieldName;\n      var compareValue = e.data.param;\n\n      e.setMessage(\n        'The value of the \"' + fieldName +\n        '\" field has to be greater than or equal \"' + compareValue + '\"'\n      );\n    }\n  }\n});\n","Astro.createValidator({\n  name: 'lt',\n  validate: function(fieldValue, fieldName, compareValue) {\n    return fieldValue < compareValue;\n  },\n  events: {\n    validationerror: function(e) {\n      var fieldName = e.data.fieldName;\n      var compareValue = e.data.param;\n\n      e.setMessage(\n        'The value of the \"' + fieldName +\n        '\" field has to be less than \"' + compareValue + '\"'\n      );\n    }\n  }\n});\n","Astro.createValidator({\n  name: 'lte',\n  validate: function(fieldValue, fieldName, compareValue) {\n    return fieldValue <= compareValue;\n  },\n  events: {\n    validationerror: function(e) {\n      var fieldName = e.data.fieldName;\n      var compareValue = e.data.param;\n\n      e.setMessage(\n        'The value of the \"' + fieldName +\n        '\" field has to be less than or equal \"' + compareValue + '\"'\n      );\n    }\n  }\n});\n","Astro.createValidator({\n  name: 'choice',\n  validate: function(fieldValue, fieldName, choices) {\n    return _.contains(choices, fieldValue);\n  },\n  events: {\n    validationerror: function(e) {\n      var fieldName = e.data.fieldName;\n      var choices = e.data.param;\n\n      e.setMessage(\n        'The value of the \"' + fieldName +\n        '\" field has to be one of \"' + choices.join('\", \"') + '\"'\n      );\n    }\n  }\n});\n","Astro.createValidator({\n  name: 'unique',\n  validate: function(fieldValue, fieldName) {\n    var doc = this;\n    var Class = doc.constructor;\n    var Collection = Class.getCollection();\n\n    // If a Class is not related with any collection then document is unique.\n    if (!Collection) {\n      return true;\n    }\n\n    // Prepare selector.\n    var selector = {};\n    selector[fieldName] = fieldValue;\n\n    // If the \"_id\" fields is present, then object is being updated.\n    // In this case, ignore the object itself.\n    if (this._id) {\n      selector._id = {\n        $ne: this._id\n      };\n    }\n\n    // Check if a record with the given field value exists.\n    return _.isUndefined(Collection.findOne(selector));\n  },\n  events: {\n    validationerror: function(e) {\n      var fieldName = e.data.fieldName;\n\n      e.setMessage(\n        'The value of the \"' + fieldName + '\" field has to be unique'\n      );\n    }\n  }\n});\n","Astro.createValidator({\n  name: 'equal',\n  validate: function(fieldValue, fieldName, compareValue) {\n    return fieldValue === compareValue;\n  },\n  events: {\n    validationerror: function(e) {\n      var fieldName = e.data.fieldName;\n      var compareValue = e.data.param;\n\n      e.setMessage(\n        'The value of the \"' + fieldName +\n        '\" field has to be equal \"' + compareValue + '\"'\n      );\n    }\n  }\n});\n","Astro.createValidator({\n  name: 'equalTo',\n  validate: function(fieldValue, fieldName, compareFieldName) {\n    var compareValue = this.get(compareFieldName);\n\n    return fieldValue === compareValue;\n  },\n  events: {\n    validationerror: function(e) {\n      var fieldName = e.data.fieldName;\n      var compareFieldName = e.data.param;\n      var compareValue = this.get(compareFieldName);\n\n      e.setMessage(\n        'The values of the \"' + fieldName + '\" and \"' +\n        compareValue + '\" fields have to be equal'\n      );\n    }\n  }\n});\n","Astro.createValidator({\n  name: 'regexp',\n  validate: function(fieldValue, fieldName, pattern) {\n    return pattern.test(fieldValue);\n  },\n  events: {\n    validationerror: function(e) {\n      var fieldName = e.data.fieldName;\n      var pattern = e.data.param.toString();\n\n      e.setMessage(\n        'The value of the \"' + fieldName +\n        '\" field has to match the \"' + pattern + '\" regular expression'\n      );\n    }\n  }\n});\n","Astro.createValidator({\n  name: 'and',\n  validate: function(fieldValue, fieldName, fieldValidators) {\n    var doc = this;\n\n    return _.every(fieldValidators, function(fieldValidator) {\n      return fieldValidator.validate(\n        doc, fieldName, fieldValue\n      );\n    });\n  }\n});\n","Astro.createValidator({\n  name: 'or',\n  validate: function(fieldValue, fieldName, fieldValidators) {\n    var doc = this;\n    var error;\n    var doc = this;\n\n    if (!_.some(fieldValidators, function(fieldValidator) {\n      try {\n        return fieldValidator.validate(\n          doc, fieldName, fieldValue\n        );\n      } catch (e) {\n        if (e instanceof Astro.ValidationError) {\n          // We get the first error that occured. We will throw it again if\n          // there are no validators that pass.\n          if (!error) {\n            error = e;\n          }\n          return false;\n        } else {\n          throw e;\n        }\n      }\n    })) {\n      throw error;\n    }\n\n    return true;\n  }\n});\n","Astro.createValidator({\n  name: 'if',\n  validate: function(fieldValue, fieldName, options) {\n    var doc = this;\n\n    if (!_.has(options, 'condition') || !_.isFunction(options.condition)) {\n      throw new Error(\n        'The \"condition\" option in the \"if\" validator is required'\n      );\n    }\n\n    if (\n      !_.has(options, 'true') || !options.true instanceof Astro.FieldValidator\n    ) {\n      throw new Error(\n        'The \"true\" option in the \"if\" validator is required'\n      );\n    }\n\n    if (options.condition.call(doc, fieldValue, fieldName)) {\n      return options.true.validate(doc, fieldName, fieldValue);\n    }\n\n    if (\n      _.has(options, 'false') &&\n      options.false instanceof Astro.FieldValidator\n    ) {\n      return options.false.validate(doc, fieldName, fieldValue);\n    }\n\n    return true;\n  }\n});\n","Astro.createValidator({\n  name: 'switch',\n  validate: function(fieldValue, fieldName, options) {\n    var doc = this;\n\n    if (!_.has(options, 'cases') || !_.isObject(options.cases)) {\n      throw new Error(\n        'The \"cases\" option in the \"switch\" validator is required'\n      );\n    }\n\n    if (_.has(options, 'expression') && !_.isFunction(options.expression)) {\n      throw new Error(\n        'The \"expression\" option in the \"switch\" validator has to be a function'\n      );\n    }\n\n    var expression;\n    if (_.has(options, 'expression')) {\n      expression = options.expression.call(doc, fieldValue, fieldName);\n    } else {\n      expression = fieldValue;\n    }\n\n    if (_.has(options.cases, expression)) {\n      return options.cases[expression].validate(doc, fieldName, fieldValue);\n    }\n\n    return true;\n  }\n});\n","Astro.createValidator({\n  name: 'every',\n  validate: function(fieldValue, fieldName, fieldValidator) {\n    var doc = this;\n\n    if (!_.isArray(fieldValue)) {\n      return true;\n    }\n\n    return _.every(fieldValue, function(value) {\n      return fieldValidator.validate(\n        doc,\n        fieldName,\n        value\n      );\n    });\n  }\n});\n","Astro.createValidator({\n  name: 'has',\n  validate: function(fieldValue, fieldName, propertyName) {\n    if (!_.isObject(fieldValue)) {\n      return false;\n    }\n\n    return _.has(fieldValue, propertyName);\n  },\n  events: {\n    validationerror: function(e) {\n      var fieldName = e.data.fieldName;\n      var propertyName = e.data.param;\n\n      e.setMessage(\n        'The value of the \"' + fieldName +\n        '\" field has to have \"' + propertyName + '\" property'\n      );\n    }\n  }\n});\n","Astro.createValidator({\n  name: 'contains',\n  validate: function(fieldValue, fieldName, sought) {\n    if (!(_.isArray(fieldValue) || _.isObject(fieldValue))) {\n      return false;\n    }\n\n    return _.contains(fieldValue, sought);\n  },\n  events: {\n    validationerror: function(e) {\n      var fieldName = e.data.fieldName;\n      var sought = e.data.param;\n\n      e.setMessage(\n        'The value of the \"' + fieldName +\n        '\" field has to contain the \"' + sought + '\" value'\n      );\n    }\n  }\n});\n"]}