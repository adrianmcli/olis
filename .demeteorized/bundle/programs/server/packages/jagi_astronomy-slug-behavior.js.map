{"version":3,"sources":["meteor://ðŸ’»app/packages/jagi_astronomy-slug-behavior/lib/behavior/events.js","meteor://ðŸ’»app/packages/jagi_astronomy-slug-behavior/lib/behavior/methods.js","meteor://ðŸ’»app/packages/jagi_astronomy-slug-behavior/lib/behavior/behavior.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACxQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/packages/jagi_astronomy-slug-behavior.js","sourcesContent":["events = {};\n\nevents.afterInit = function() {\n  var doc = this;\n  var Class = doc.constructor;\n\n  // Find a class on which the behavior had been set.\n  var classBehavior = Class.getBehavior('slug');\n  var options = classBehavior.options;\n\n  Class.getBehavior('slug').generateSlug(doc);\n};\n\nevents.beforeSave = function() {\n  var doc = this;\n  var Class = doc.constructor;\n\n  // Find a class on which the behavior had been set.\n  var classBehavior = Class.getBehavior('slug');\n  var options = classBehavior.options;\n\n  // Check if a field from which we want to create a slug has been\n  // modified.\n  var modified = doc.getModified();\n  if (!_.has(modified, options.fieldName)) {\n    return;\n  }\n\n  Class.getBehavior('slug').generateSlug(doc);\n};","var diacriticsMap = [{\n  'base': 'a',\n  'letters': /[\\u0061\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250\\u0430]/g\n}, {\n  'base': 'aa',\n  'letters': /[\\uA733]/g\n}, {\n  'base': 'ae',\n  'letters': /[\\u00E6\\u01FD\\u01E3]/g\n}, {\n  'base': 'ao',\n  'letters': /[\\uA735]/g\n}, {\n  'base': 'au',\n  'letters': /[\\uA737]/g\n}, {\n  'base': 'av',\n  'letters': /[\\uA739\\uA73B]/g\n}, {\n  'base': 'ay',\n  'letters': /[\\uA73D]/g\n}, {\n  'base': 'b',\n  'letters': /[\\u0062\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253\\u0431]/g\n}, {\n  'base': 'c',\n  'letters': /[\\u0063\\u24D2\\uFF43\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184]/g\n}, {\n  'base': 'ch',\n  'letters': /[\\u0447]/g\n}, {\n  'base': 'd',\n  'letters': /[\\u0064\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\uA77A\\u0434]/g\n}, {\n  'base': 'dz',\n  'letters': /[\\u01F3\\u01C6]/g\n}, {\n  'base': 'e',\n  'letters': /[\\u0065\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u025B\\u01DD\\u0435\\u0451\\u044D]/g\n}, {\n  'base': 'f',\n  'letters': /[\\u0066\\u24D5\\uFF46\\u1E1F\\u0192\\uA77C\\u0444]/g\n}, {\n  'base': 'g',\n  'letters': /[\\u0067\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\u1D79\\uA77F\\u0433]/g\n}, {\n  'base': 'h',\n  'letters': /[\\u0068\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265]/g\n}, {\n  'base': 'hv',\n  'letters': /[\\u0195]/g\n}, {\n  'base': 'i',\n  'letters': /[\\u0069\\u24D8\\uFF49\\u00EC\\u00ED\\u00EE\\u0129\\u012B\\u012D\\u00EF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131\\u0438\\u0439]/g\n}, {\n  'base': 'ia',\n  'letters': /[\\u044F]/g\n}, {\n  'base': 'ie',\n  'letters': /[\\u044A]/g\n}, {\n  'base': 'iu',\n  'letters': /[\\u044E]/g\n}, {\n  'base': 'j',\n  'letters': /[\\u006A\\u24D9\\uFF4A\\u0135\\u01F0\\u0249]/g\n}, {\n  'base': 'k',\n  'letters': /[\\u006B\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3\\u043A]/g\n}, {\n  'base': 'kh',\n  'letters': /[\\u0445]/g\n}, {\n  'base': 'l',\n  'letters': /[\\u006C\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u017F\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747\\u043B]/g\n}, {\n  'base': 'lj',\n  'letters': /[\\u01C9]/g\n}, {\n  'base': 'm',\n  'letters': /[\\u006D\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F\\u043C]/g\n}, {\n  'base': 'n',\n  'letters': /[\\u006E\\u24DD\\uFF4E\\u01F9\\u0144\\u00F1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5\\u043D]/g\n}, {\n  'base': 'nj',\n  'letters': /[\\u01CC]/g\n}, {\n  'base': 'o',\n  'letters': /[\\u006F\\u24DE\\uFF4F\\u00F2\\u00F3\\u00F4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\u00F5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\u00F6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\u00F8\\u01FF\\u0254\\uA74B\\uA74D\\u0275\\u043E]/g\n}, {\n  'base': 'oi',\n  'letters': /[\\u01A3]/g\n}, {\n  'base': 'ou',\n  'letters': /[\\u0223]/g\n}, {\n  'base': 'oo',\n  'letters': /[\\uA74F]/g\n}, {\n  'base': 'p',\n  'letters': /[\\u0070\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755\\u043F]/g\n}, {\n  'base': 'q',\n  'letters': /[\\u0071\\u24E0\\uFF51\\u024B\\uA757\\uA759]/g\n}, {\n  'base': 'r',\n  'letters': /[\\u0072\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783\\u0440]/g\n}, {\n  'base': 's',\n  'letters': /[\\u0073\\u24E2\\uFF53\\u00DF\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B\\u0441]/g\n}, {\n  'base': 'sh',\n  'letters': /[\\u0448]/g\n}, {\n  'base': 'shch',\n  'letters': /[\\u0449]/g\n}, {\n  'base': 't',\n  'letters': /[\\u0074\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787\\u0442]/g\n}, {\n  'base': 'ts',\n  'letters': /[\\u0446]/g\n}, {\n  'base': 'tz',\n  'letters': /[\\uA729]/g\n}, {\n  'base': 'u',\n  'letters': /[\\u0075\\u24E4\\uFF55\\u00F9\\u00FA\\u00FB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\u00FC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289\\u0443]/g\n}, {\n  'base': 'v',\n  'letters': /[\\u0076\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C\\u0432]/g\n}, {\n  'base': 'vy',\n  'letters': /[\\uA761]/g\n}, {\n  'base': 'w',\n  'letters': /[\\u0077\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73]/g\n}, {\n  'base': 'x',\n  'letters': /[\\u0078\\u24E7\\uFF58\\u1E8B\\u1E8D]/g\n}, {\n  'base': 'y',\n  'letters': /[\\u0079\\u24E8\\uFF59\\u1EF3\\u00FD\\u0177\\u1EF9\\u0233\\u1E8F\\u00FF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF\\u044B]/g\n}, {\n  'base': 'z',\n  'letters': /[\\u007A\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763\\u0437]/g\n}, {\n  'base': 'zh',\n  'letters': /[\\u0436]/g\n}];\n\nvar removeDiacritics = function(value) {\n  _.each(diacriticsMap, function(diacriticMap) {\n    value = value.replace(diacriticMap.letters, diacriticMap.base);\n  });\n\n  return value;\n};\n\nvar generateSlug = function(value, separator) {\n  // Make text lower case and...\n  return removeDiacritics(value.toLowerCase()) // Remove diacritics characters.\n    .replace(/[^\\w\\s-]+/g, '') // Remove unsupported characters.\n    .replace(/^\\s+|\\s+$/g, '') // Trim.\n    .replace(/\\s+/g, separator); // Replace white characters with separator.\n};\n\nmethods = {};\n\nmethods.generateSlug = function(doc) {\n  var Class = doc.constructor;\n\n  // Find a class on which the behavior had been set.\n  var classBehavior = Class.getBehavior('slug');\n  var options = classBehavior.options;\n\n  if (options.fieldName && options.methodName) {\n    throw new Error(\n      'Can not generate a slug from a field and a method at the same time ' +\n      'in the \"' + Class.getName() + '\" class'\n    );\n  }\n\n  var value;\n  if (options.fieldName) {\n    // Check if a field to create a slug from exists.\n    var field = Class.getField(options.fieldName);\n    if (!field) {\n      throw new Error(\n        'Can not create a slug from the \"' + options.fieldName +\n        '\" field that does not exist in the \"' + Class.getName() + '\" class'\n      );\n    }\n    // Get a value of a field to make a slug.\n    value = doc[options.fieldName];\n  } else if (options.methodName) {\n    // Check if a method to generate a value for a slug exists.\n    var field = Class.getMethod(options.methodName);\n    if (!field) {\n      throw new Error(\n        'Can not create a slug from the \"' + options.methodName +\n        '\" method that does not exist in the \"' + Class.getName() + '\" class'\n      );\n    }\n    // Generate a value from a method to make a slug from.\n    value = doc[options.methodName]();\n  }\n\n  // If a value is null then we can not create a slug.\n  if (_.isNull(value)) {\n    return;\n  }\n\n  // Take the current value of the slug field.\n  var currentSlug = doc[options.slugFieldName];\n\n  // If the current slug is not empty and we can not update, then we have to\n  // stop here.\n  if (currentSlug && !options.canUpdate) {\n    return;\n  }\n\n  // Generate a slug and use a defined separator.\n  var slug = generateSlug(value, options.separator);\n\n  // If the \"unique\" option was set, then check whether there are any\n  // duplicates. If there is any document with the same slug, then we have to\n  // add number at the end of the slug.\n  if (options.unique) {\n    var selector = {};\n    selector[options.slugFieldName] = slug;\n    var Collection = Class.getCollection();\n    var count = Collection.find(selector).count();\n\n    if (count > 0) {\n      // Prepare the selector with a regular expression querying all the\n      // documents that contains our slug and ends with number.\n      var prefix = slug + options.separator;\n      var re = new RegExp('^' + prefix + '\\\\d+$');\n      selector[options.slugFieldName] = re;\n\n      // Limit the amount of fields being fetched to only the slug field.\n      var fields = {};\n      fields[options.slugFieldName] = 1;\n\n      // Set the first number that will be added at the end of the slug to 2.\n      var index = 2;\n\n      // Loop through all the documents with the same slug.\n      Collection.find(selector, fields).forEach(function(d) {\n        var dSlug = d.get(options.slugFieldName);\n        var dIndex = parseInt(dSlug.replace(prefix, ''), 10);\n        if (dIndex >= index) {\n          index = dIndex + 1;\n        }\n      });\n\n      slug = prefix + index;\n    }\n  }\n\n  // Set the slug.\n  doc.set(options.slugFieldName, slug);\n};\n","Astro.createBehavior({\n  name: 'slug',\n  options: {\n    generateOnInit: false,\n    fieldName: 'name',\n    methodName: null,\n    slugFieldName: 'slug',\n    canUpdate: false,\n    unique: true,\n    separator: '-'\n  },\n  methods: methods,\n  createSchemaDefinition: function(options) {\n    var schemaDefinition = {\n      fields: {},\n      methods: {\n        generateSlug: function() {\n          var doc = this;\n          var Class = doc.constructor;\n\n          Astro.utils.warn(\n            'This method is depracated. You should use \"' + Class.getName() +\n            '.getBehavior(\"slug\").generateSlug(doc);\" instead.'\n          );\n\n          Class.getBehavior('slug').generateSlug(doc);\n        }\n      }\n    };\n\n    // Add events.\n    schemaDefinition.events = {\n      beforeSave: events.beforeSave\n    };\n    if (options.generateOnInit) {\n      schemaDefinition.events.afterInit = events.afterInit;\n    }\n\n    // Add a slug field.\n    schemaDefinition.fields[options.slugFieldName] = {\n      type: 'string',\n      immutable: !options.canUpdate\n    };\n\n    return schemaDefinition;\n  }\n});\n"]}