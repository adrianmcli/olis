{"version":3,"sources":["meteor://ðŸ’»app/packages/meteorhacks_kadira/packages/meteorhacks_kadira.js"],"names":[],"mappingsfile":"/packages/meteorhacks_kadira.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/common/unify.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nKadira = {};                                                                                                          // 1\nKadira.options = {};                                                                                                  // 2\n                                                                                                                      // 3\nif(Meteor.wrapAsync) {                                                                                                // 4\n  Kadira._wrapAsync = Meteor.wrapAsync;                                                                               // 5\n} else {                                                                                                              // 6\n  Kadira._wrapAsync = Meteor._wrapAsync;                                                                              // 7\n}                                                                                                                     // 8\n                                                                                                                      // 9\nif(Meteor.isServer) {                                                                                                 // 10\n  var EventEmitter = Npm.require('events').EventEmitter;                                                              // 11\n  var eventBus = new EventEmitter();                                                                                  // 12\n  eventBus.setMaxListeners(0);                                                                                        // 13\n                                                                                                                      // 14\n  var buildArgs = function(args) {                                                                                    // 15\n    args = _.toArray(args);                                                                                           // 16\n    var eventName = args[0] + '-' + args[1];                                                                          // 17\n    var args = args.slice(2);                                                                                         // 18\n    args.unshift(eventName);                                                                                          // 19\n    return args;                                                                                                      // 20\n  };                                                                                                                  // 21\n                                                                                                                      // 22\n  Kadira.EventBus = {};                                                                                               // 23\n  _.each(['on', 'emit', 'removeListener', 'removeAllListeners'], function(m) {                                        // 24\n    Kadira.EventBus[m] = function() {                                                                                 // 25\n      var args = buildArgs(arguments);                                                                                // 26\n      return eventBus[m].apply(eventBus, args);                                                                       // 27\n    };                                                                                                                // 28\n  });                                                                                                                 // 29\n}                                                                                                                     // 30\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/models/base_error.js                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nBaseErrorModel = function(options) {                                                                                  // 1\n  this._filters = [];                                                                                                 // 2\n};                                                                                                                    // 3\n                                                                                                                      // 4\nBaseErrorModel.prototype.addFilter = function(filter) {                                                               // 5\n  if(typeof filter === 'function') {                                                                                  // 6\n    this._filters.push(filter);                                                                                       // 7\n  } else {                                                                                                            // 8\n    throw new Error(\"Error filter must be a function\");                                                               // 9\n  }                                                                                                                   // 10\n};                                                                                                                    // 11\n                                                                                                                      // 12\nBaseErrorModel.prototype.removeFilter = function(filter) {                                                            // 13\n  var index = this._filters.indexOf(filter);                                                                          // 14\n  if(index >= 0) {                                                                                                    // 15\n    this._filters.splice(index, 1);                                                                                   // 16\n  }                                                                                                                   // 17\n};                                                                                                                    // 18\n                                                                                                                      // 19\nBaseErrorModel.prototype.applyFilters = function(type, message, error, subType) {                                     // 20\n  for(var lc=0; lc<this._filters.length; lc++) {                                                                      // 21\n    var filter = this._filters[lc];                                                                                   // 22\n    try {                                                                                                             // 23\n      var validated = filter(type, message, error, subType);                                                          // 24\n      if(!validated) return false;                                                                                    // 25\n    } catch (ex) {                                                                                                    // 26\n      // we need to remove this filter                                                                                // 27\n      // we may ended up in a error cycle                                                                             // 28\n      this._filters.splice(lc, 1);                                                                                    // 29\n      throw new Error(\"an error thrown from a filter you've suplied\", ex.message);                                    // 30\n    }                                                                                                                 // 31\n  }                                                                                                                   // 32\n                                                                                                                      // 33\n  return true;                                                                                                        // 34\n};                                                                                                                    // 35\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/jobs.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar Jobs = Kadira.Jobs = {};                                                                                          // 1\nJobs.getAsync = function(id, callback) {                                                                              // 2\n  var payload = {                                                                                                     // 3\n    action: 'get',                                                                                                    // 4\n    params: {                                                                                                         // 5\n      id: id                                                                                                          // 6\n    }                                                                                                                 // 7\n  };                                                                                                                  // 8\n                                                                                                                      // 9\n  Kadira.send(payload, '/jobs', callback);                                                                            // 10\n};                                                                                                                    // 11\n                                                                                                                      // 12\nJobs.setAsync = function(id, changes, callback) {                                                                     // 13\n  var payload = {                                                                                                     // 14\n    action: 'set',                                                                                                    // 15\n    params: {                                                                                                         // 16\n      id: id                                                                                                          // 17\n    }                                                                                                                 // 18\n  };                                                                                                                  // 19\n  _.extend(payload.params, changes);                                                                                  // 20\n                                                                                                                      // 21\n  Kadira.send(payload, '/jobs', callback);                                                                            // 22\n};                                                                                                                    // 23\n                                                                                                                      // 24\n                                                                                                                      // 25\nJobs.get = Kadira._wrapAsync(Jobs.getAsync);                                                                          // 26\nJobs.set = Kadira._wrapAsync(Jobs.setAsync);                                                                          // 27\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/retry.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// Retry logic with an exponential backoff.                                                                           // 1\n//                                                                                                                    // 2\n// options:                                                                                                           // 3\n//  baseTimeout: time for initial reconnect attempt (ms).                                                             // 4\n//  exponent: exponential factor to increase timeout each attempt.                                                    // 5\n//  maxTimeout: maximum time between retries (ms).                                                                    // 6\n//  minCount: how many times to reconnect \"instantly\".                                                                // 7\n//  minTimeout: time to wait for the first `minCount` retries (ms).                                                   // 8\n//  fuzz: factor to randomize retry times by (to avoid retry storms).                                                 // 9\n                                                                                                                      // 10\n//TODO: remove this class and use Meteor Retry in a later version of meteor.                                          // 11\n                                                                                                                      // 12\nRetry = function (options) {                                                                                          // 13\n  var self = this;                                                                                                    // 14\n  _.extend(self, _.defaults(_.clone(options || {}), {                                                                 // 15\n    baseTimeout: 1000, // 1 second                                                                                    // 16\n    exponent: 2.2,                                                                                                    // 17\n    // The default is high-ish to ensure a server can recover from a                                                  // 18\n    // failure caused by load.                                                                                        // 19\n    maxTimeout: 5 * 60000, // 5 minutes                                                                               // 20\n    minTimeout: 10,                                                                                                   // 21\n    minCount: 2,                                                                                                      // 22\n    fuzz: 0.5 // +- 25%                                                                                               // 23\n  }));                                                                                                                // 24\n  self.retryTimer = null;                                                                                             // 25\n};                                                                                                                    // 26\n                                                                                                                      // 27\n_.extend(Retry.prototype, {                                                                                           // 28\n                                                                                                                      // 29\n  // Reset a pending retry, if any.                                                                                   // 30\n  clear: function () {                                                                                                // 31\n    var self = this;                                                                                                  // 32\n    if(self.retryTimer)                                                                                               // 33\n      clearTimeout(self.retryTimer);                                                                                  // 34\n    self.retryTimer = null;                                                                                           // 35\n  },                                                                                                                  // 36\n                                                                                                                      // 37\n  // Calculate how long to wait in milliseconds to retry, based on the                                                // 38\n  // `count` of which retry this is.                                                                                  // 39\n  _timeout: function (count) {                                                                                        // 40\n    var self = this;                                                                                                  // 41\n                                                                                                                      // 42\n    if(count < self.minCount)                                                                                         // 43\n      return self.minTimeout;                                                                                         // 44\n                                                                                                                      // 45\n    var timeout = Math.min(                                                                                           // 46\n      self.maxTimeout,                                                                                                // 47\n      self.baseTimeout * Math.pow(self.exponent, count));                                                             // 48\n    // fuzz the timeout randomly, to avoid reconnect storms when a                                                    // 49\n    // server goes down.                                                                                              // 50\n    timeout = timeout * ((Random.fraction() * self.fuzz) +                                                            // 51\n                         (1 - self.fuzz/2));                                                                          // 52\n    return Math.ceil(timeout);                                                                                        // 53\n  },                                                                                                                  // 54\n                                                                                                                      // 55\n  // Call `fn` after a delay, based on the `count` of which retry this is.                                            // 56\n  retryLater: function (count, fn) {                                                                                  // 57\n    var self = this;                                                                                                  // 58\n    var timeout = self._timeout(count);                                                                               // 59\n    if(self.retryTimer)                                                                                               // 60\n      clearTimeout(self.retryTimer);                                                                                  // 61\n                                                                                                                      // 62\n    self.retryTimer = setTimeout(fn, timeout);                                                                        // 63\n    return timeout;                                                                                                   // 64\n  }                                                                                                                   // 65\n                                                                                                                      // 66\n});                                                                                                                   // 67\n                                                                                                                      // 68\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/utils.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar Fiber = Npm.require('fibers');                                                                                    // 1\n                                                                                                                      // 2\nHaveAsyncCallback = function(args) {                                                                                  // 3\n  var lastArg = args[args.length -1];                                                                                 // 4\n  return (typeof lastArg) == 'function';                                                                              // 5\n};                                                                                                                    // 6\n                                                                                                                      // 7\nUniqueId = function(start) {                                                                                          // 8\n  this.id = 0;                                                                                                        // 9\n}                                                                                                                     // 10\n                                                                                                                      // 11\nUniqueId.prototype.get = function() {                                                                                 // 12\n  return \"\" + this.id++;                                                                                              // 13\n};                                                                                                                    // 14\n                                                                                                                      // 15\nDefaultUniqueId = new UniqueId();                                                                                     // 16\n                                                                                                                      // 17\n// Optimized version of apply which tries to call as possible as it can                                               // 18\n// Then fall back to apply                                                                                            // 19\n// This is because, v8 is very slow to invoke apply.                                                                  // 20\nOptimizedApply = function OptimizedApply(context, fn, args) {                                                         // 21\n  var a = args;                                                                                                       // 22\n  switch(a.length) {                                                                                                  // 23\n    case 0:                                                                                                           // 24\n      return fn.call(context);                                                                                        // 25\n    case 1:                                                                                                           // 26\n      return fn.call(context, a[0]);                                                                                  // 27\n    case 2:                                                                                                           // 28\n      return fn.call(context, a[0], a[1]);                                                                            // 29\n    case 3:                                                                                                           // 30\n      return fn.call(context, a[0], a[1], a[2]);                                                                      // 31\n    case 4:                                                                                                           // 32\n      return fn.call(context, a[0], a[1], a[2], a[3]);                                                                // 33\n    case 5:                                                                                                           // 34\n      return fn.call(context, a[0], a[1], a[2], a[3], a[4]);                                                          // 35\n    default:                                                                                                          // 36\n      return fn.apply(context, a);                                                                                    // 37\n  }                                                                                                                   // 38\n}                                                                                                                     // 39\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/ntp.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar logger = getLogger();                                                                                             // 1\n                                                                                                                      // 2\nNtp = function (endpoint) {                                                                                           // 3\n  this.setEndpoint(endpoint);                                                                                         // 4\n  this.diff = 0;                                                                                                      // 5\n  this.synced = false;                                                                                                // 6\n  this.reSyncCount = 0;                                                                                               // 7\n  this.reSync = new Retry({                                                                                           // 8\n    baseTimeout: 1000*60,                                                                                             // 9\n    maxTimeout: 1000*60*10,                                                                                           // 10\n    minCount: 0                                                                                                       // 11\n  });                                                                                                                 // 12\n}                                                                                                                     // 13\n                                                                                                                      // 14\nNtp._now = function() {                                                                                               // 15\n  var now = Date.now();                                                                                               // 16\n  if(typeof now == 'number') {                                                                                        // 17\n    return now;                                                                                                       // 18\n  } else if(now instanceof Date) {                                                                                    // 19\n    // some extenal JS libraries override Date.now and returns a Date object                                          // 20\n    // which directly affect us. So we need to prepare for that                                                       // 21\n    return now.getTime();                                                                                             // 22\n  } else {                                                                                                            // 23\n    // trust me. I've seen now === undefined                                                                          // 24\n    return (new Date()).getTime();                                                                                    // 25\n  }                                                                                                                   // 26\n};                                                                                                                    // 27\n                                                                                                                      // 28\nNtp.prototype.setEndpoint = function(endpoint) {                                                                      // 29\n  this.endpoint = endpoint + '/simplentp/sync';                                                                       // 30\n};                                                                                                                    // 31\n                                                                                                                      // 32\nNtp.prototype.getTime = function() {                                                                                  // 33\n  return Ntp._now() + Math.round(this.diff);                                                                          // 34\n};                                                                                                                    // 35\n                                                                                                                      // 36\nNtp.prototype.syncTime = function(localTime) {                                                                        // 37\n  return localTime + Math.ceil(this.diff);                                                                            // 38\n};                                                                                                                    // 39\n                                                                                                                      // 40\nNtp.prototype.sync = function() {                                                                                     // 41\n  logger('init sync');                                                                                                // 42\n  var self = this;                                                                                                    // 43\n  var retryCount = 0;                                                                                                 // 44\n  var retry = new Retry({                                                                                             // 45\n    baseTimeout: 1000*20,                                                                                             // 46\n    maxTimeout: 1000*60,                                                                                              // 47\n    minCount: 1,                                                                                                      // 48\n    minTimeout: 0                                                                                                     // 49\n  });                                                                                                                 // 50\n  syncTime();                                                                                                         // 51\n                                                                                                                      // 52\n  function syncTime () {                                                                                              // 53\n    if(retryCount<5) {                                                                                                // 54\n      logger('attempt time sync with server', retryCount);                                                            // 55\n      // if we send 0 to the retryLater, cacheDns will run immediately                                                // 56\n      retry.retryLater(retryCount++, cacheDns);                                                                       // 57\n    } else {                                                                                                          // 58\n      logger('maximum retries reached');                                                                              // 59\n      self.reSync.retryLater(self.reSyncCount++, function () {                                                        // 60\n        var args = [].slice.call(arguments);                                                                          // 61\n        self.sync.apply(self, args);                                                                                  // 62\n      });                                                                                                             // 63\n    }                                                                                                                 // 64\n  }                                                                                                                   // 65\n                                                                                                                      // 66\n  // first attempt is to cache dns. So, calculation does not                                                          // 67\n  // include DNS resolution time                                                                                      // 68\n  function cacheDns () {                                                                                              // 69\n    self.getServerTime(function(err) {                                                                                // 70\n      if(!err) {                                                                                                      // 71\n        calculateTimeDiff();                                                                                          // 72\n      } else {                                                                                                        // 73\n        syncTime();                                                                                                   // 74\n      }                                                                                                               // 75\n    });                                                                                                               // 76\n  }                                                                                                                   // 77\n                                                                                                                      // 78\n  function calculateTimeDiff () {                                                                                     // 79\n    var clientStartTime = (new Date()).getTime();                                                                     // 80\n    self.getServerTime(function(err, serverTime) {                                                                    // 81\n      if(!err && serverTime) {                                                                                        // 82\n        // (Date.now() + clientStartTime)/2 : Midpoint between req and res                                            // 83\n        var networkTime = ((new Date()).getTime() - clientStartTime)/2                                                // 84\n        var serverStartTime = serverTime - networkTime;                                                               // 85\n        self.diff = serverStartTime - clientStartTime;                                                                // 86\n        self.synced = true;                                                                                           // 87\n        // we need to send 1 into retryLater.                                                                         // 88\n        self.reSync.retryLater(self.reSyncCount++, function () {                                                      // 89\n          var args = [].slice.call(arguments);                                                                        // 90\n          self.sync.apply(self, args);                                                                                // 91\n        });                                                                                                           // 92\n        logger('successfully updated diff value', self.diff);                                                         // 93\n      } else {                                                                                                        // 94\n        syncTime();                                                                                                   // 95\n      }                                                                                                               // 96\n    });                                                                                                               // 97\n  }                                                                                                                   // 98\n}                                                                                                                     // 99\n                                                                                                                      // 100\nNtp.prototype.getServerTime = function(callback) {                                                                    // 101\n  var self = this;                                                                                                    // 102\n                                                                                                                      // 103\n  if(Meteor.isServer) {                                                                                               // 104\n    var Fiber = Npm.require('fibers');                                                                                // 105\n    new Fiber(function() {                                                                                            // 106\n      HTTP.get(self.endpoint, function (err, res) {                                                                   // 107\n        if(err) {                                                                                                     // 108\n          callback(err);                                                                                              // 109\n        } else {                                                                                                      // 110\n          var serverTime = parseInt(res.content)                                                                      // 111\n          callback(null, serverTime);                                                                                 // 112\n        }                                                                                                             // 113\n      });                                                                                                             // 114\n    }).run();                                                                                                         // 115\n  } else {                                                                                                            // 116\n    $.ajax({                                                                                                          // 117\n      type: 'GET',                                                                                                    // 118\n      url: self.endpoint,                                                                                             // 119\n      success: function(serverTime) {                                                                                 // 120\n        callback(null, parseInt(serverTime));                                                                         // 121\n      },                                                                                                              // 122\n      error: function(err) {                                                                                          // 123\n        callback(err);                                                                                                // 124\n      }                                                                                                               // 125\n    });                                                                                                               // 126\n  }                                                                                                                   // 127\n};                                                                                                                    // 128\n                                                                                                                      // 129\nfunction getLogger() {                                                                                                // 130\n  if(Meteor.isServer) {                                                                                               // 131\n    return Npm.require('debug')(\"kadira:ntp\");                                                                        // 132\n  } else {                                                                                                            // 133\n    return function(message) {                                                                                        // 134\n      var canLogKadira =                                                                                              // 135\n        Meteor._localStorage.getItem('LOG_KADIRA') !== null                                                           // 136\n        && typeof console !== 'undefined';                                                                            // 137\n                                                                                                                      // 138\n      if(canLogKadira) {                                                                                              // 139\n        if(message) {                                                                                                 // 140\n          message = \"kadira:ntp \" + message;                                                                          // 141\n          arguments[0] = message;                                                                                     // 142\n        }                                                                                                             // 143\n        console.log.apply(console, arguments);                                                                        // 144\n      }                                                                                                               // 145\n    }                                                                                                                 // 146\n  }                                                                                                                   // 147\n}                                                                                                                     // 148\n                                                                                                                      // 149\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/wait_time_builder.js                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar WAITON_MESSAGE_FIELDS = ['msg', 'id', 'method', 'name', 'waitTime'];                                              // 1\n                                                                                                                      // 2\n// This is way how we can build waitTime and it's breakdown                                                           // 3\nWaitTimeBuilder = function() {                                                                                        // 4\n  this._waitListStore = {};                                                                                           // 5\n  this._currentProcessingMessages = {};                                                                               // 6\n  this._messageCache = {};                                                                                            // 7\n};                                                                                                                    // 8\n                                                                                                                      // 9\nWaitTimeBuilder.prototype.register = function(session, msgId) {                                                       // 10\n  var self = this;                                                                                                    // 11\n  var mainKey = self._getMessageKey(session.id, msgId);                                                               // 12\n                                                                                                                      // 13\n  var inQueue = session.inQueue || [];                                                                                // 14\n  if(typeof inQueue.toArray === 'function') {                                                                         // 15\n    // latest version of Meteor uses a double-ended-queue for the inQueue                                             // 16\n    // info: https://www.npmjs.com/package/double-ended-queue                                                         // 17\n    inQueue = inQueue.toArray();                                                                                      // 18\n  }                                                                                                                   // 19\n                                                                                                                      // 20\n  var waitList = inQueue.map(function(msg) {                                                                          // 21\n    var key = self._getMessageKey(session.id, msg.id);                                                                // 22\n    return self._getCacheMessage(key, msg);                                                                           // 23\n  });                                                                                                                 // 24\n                                                                                                                      // 25\n  waitList = waitList || [];                                                                                          // 26\n                                                                                                                      // 27\n  //add currently processing ddp message if exists                                                                    // 28\n  var currentlyProcessingMessage = this._currentProcessingMessages[session.id];                                       // 29\n  if(currentlyProcessingMessage) {                                                                                    // 30\n    var key = self._getMessageKey(session.id, currentlyProcessingMessage.id);                                         // 31\n    waitList.unshift(this._getCacheMessage(key, currentlyProcessingMessage));                                         // 32\n  }                                                                                                                   // 33\n                                                                                                                      // 34\n  this._waitListStore[mainKey] = waitList;                                                                            // 35\n};                                                                                                                    // 36\n                                                                                                                      // 37\nWaitTimeBuilder.prototype.build = function(session, msgId) {                                                          // 38\n  var mainKey = this._getMessageKey(session.id, msgId);                                                               // 39\n  var waitList = this._waitListStore[mainKey] || [];                                                                  // 40\n  delete this._waitListStore[mainKey];                                                                                // 41\n                                                                                                                      // 42\n  var filteredWaitList =  waitList.map(this._cleanCacheMessage.bind(this));                                           // 43\n  return filteredWaitList;                                                                                            // 44\n};                                                                                                                    // 45\n                                                                                                                      // 46\nWaitTimeBuilder.prototype._getMessageKey = function(sessionId, msgId) {                                               // 47\n  return sessionId + \"::\" + msgId;                                                                                    // 48\n};                                                                                                                    // 49\n                                                                                                                      // 50\nWaitTimeBuilder.prototype._getCacheMessage = function(key, msg) {                                                     // 51\n  var self = this;                                                                                                    // 52\n  var cachedMessage = self._messageCache[key];                                                                        // 53\n  if(!cachedMessage) {                                                                                                // 54\n    self._messageCache[key] = cachedMessage = _.pick(msg, WAITON_MESSAGE_FIELDS);                                     // 55\n    cachedMessage._key = key;                                                                                         // 56\n    cachedMessage._registered = 1;                                                                                    // 57\n  } else {                                                                                                            // 58\n    cachedMessage._registered++;                                                                                      // 59\n  }                                                                                                                   // 60\n                                                                                                                      // 61\n  return cachedMessage;                                                                                               // 62\n};                                                                                                                    // 63\n                                                                                                                      // 64\nWaitTimeBuilder.prototype._cleanCacheMessage = function(msg) {                                                        // 65\n  msg._registered--;                                                                                                  // 66\n  if(msg._registered == 0) {                                                                                          // 67\n    delete this._messageCache[msg._key];                                                                              // 68\n  }                                                                                                                   // 69\n                                                                                                                      // 70\n  // need to send a clean set of objects                                                                              // 71\n  // otherwise register can go with this                                                                              // 72\n  return _.pick(msg, WAITON_MESSAGE_FIELDS);                                                                          // 73\n};                                                                                                                    // 74\n                                                                                                                      // 75\nWaitTimeBuilder.prototype.trackWaitTime = function(session, msg, unblock) {                                           // 76\n  var self = this;                                                                                                    // 77\n  var started = Date.now();                                                                                           // 78\n  self._currentProcessingMessages[session.id] = msg;                                                                  // 79\n                                                                                                                      // 80\n  var unblocked = false;                                                                                              // 81\n  var wrappedUnblock = function() {                                                                                   // 82\n    if(!unblocked) {                                                                                                  // 83\n      var waitTime = Date.now() - started;                                                                            // 84\n      var key = self._getMessageKey(session.id, msg.id);                                                              // 85\n      var cachedMessage = self._messageCache[key];                                                                    // 86\n      if(cachedMessage) {                                                                                             // 87\n        cachedMessage.waitTime = waitTime;                                                                            // 88\n      }                                                                                                               // 89\n      delete self._currentProcessingMessages[session.id];                                                             // 90\n      unblocked = true;                                                                                               // 91\n      unblock();                                                                                                      // 92\n    }                                                                                                                 // 93\n  };                                                                                                                  // 94\n                                                                                                                      // 95\n  return wrappedUnblock;                                                                                              // 96\n};                                                                                                                    // 97\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/check_for_oplog.js                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// expose for testing purpose                                                                                         // 1\nOplogCheck = {};                                                                                                      // 2\n                                                                                                                      // 3\nOplogCheck._070 = function(cursorDescription) {                                                                       // 4\n  var options = cursorDescription.options;                                                                            // 5\n  if (options.limit) {                                                                                                // 6\n    return {                                                                                                          // 7\n      code: \"070_LIMIT_NOT_SUPPORTED\",                                                                                // 8\n      reason: \"Meteor 0.7.0 does not support limit with oplog.\",                                                      // 9\n      solution: \"Upgrade your app to Meteor version 0.7.2 or later.\"                                                  // 10\n    }                                                                                                                 // 11\n  };                                                                                                                  // 12\n                                                                                                                      // 13\n  var exists$ = _.any(cursorDescription.selector, function (value, field) {                                           // 14\n    if (field.substr(0, 1) === '$')                                                                                   // 15\n      return true;                                                                                                    // 16\n  });                                                                                                                 // 17\n                                                                                                                      // 18\n  if(exists$) {                                                                                                       // 19\n    return {                                                                                                          // 20\n      code: \"070_$_NOT_SUPPORTED\",                                                                                    // 21\n      reason: \"Meteor 0.7.0 supports only equal checks with oplog.\",                                                  // 22\n      solution: \"Upgrade your app to Meteor version 0.7.2 or later.\"                                                  // 23\n    }                                                                                                                 // 24\n  };                                                                                                                  // 25\n                                                                                                                      // 26\n  var onlyScalers = _.all(cursorDescription.selector, function (value, field) {                                       // 27\n    return typeof value === \"string\" ||                                                                               // 28\n      typeof value === \"number\" ||                                                                                    // 29\n      typeof value === \"boolean\" ||                                                                                   // 30\n      value === null ||                                                                                               // 31\n      value instanceof Meteor.Collection.ObjectID;                                                                    // 32\n  });                                                                                                                 // 33\n                                                                                                                      // 34\n  if(!onlyScalers) {                                                                                                  // 35\n    return {                                                                                                          // 36\n      code: \"070_ONLY_SCALERS\",                                                                                       // 37\n      reason: \"Meteor 0.7.0 only supports scalers as comparators.\",                                                   // 38\n      solution: \"Upgrade your app to Meteor version 0.7.2 or later.\"                                                  // 39\n    }                                                                                                                 // 40\n  }                                                                                                                   // 41\n                                                                                                                      // 42\n  return true;                                                                                                        // 43\n};                                                                                                                    // 44\n                                                                                                                      // 45\nOplogCheck._071 = function(cursorDescription) {                                                                       // 46\n  var options = cursorDescription.options;                                                                            // 47\n  var matcher = new Minimongo.Matcher(cursorDescription.selector);                                                    // 48\n  if (options.limit) {                                                                                                // 49\n    return {                                                                                                          // 50\n      code: \"071_LIMIT_NOT_SUPPORTED\",                                                                                // 51\n      reason: \"Meteor 0.7.1 does not support limit with oplog.\",                                                      // 52\n      solution: \"Upgrade your app to Meteor version 0.7.2 or later.\"                                                  // 53\n    }                                                                                                                 // 54\n  };                                                                                                                  // 55\n                                                                                                                      // 56\n  return true;                                                                                                        // 57\n};                                                                                                                    // 58\n                                                                                                                      // 59\n                                                                                                                      // 60\nOplogCheck.env = function() {                                                                                         // 61\n  if(!process.env.MONGO_OPLOG_URL) {                                                                                  // 62\n    return {                                                                                                          // 63\n      code: \"NO_ENV\",                                                                                                 // 64\n      reason: \"You haven't added oplog support for your the Meteor app.\",                                             // 65\n      solution: \"Add oplog support for your Meteor app. see: http://goo.gl/Co1jJc\"                                    // 66\n    }                                                                                                                 // 67\n  } else {                                                                                                            // 68\n    return true;                                                                                                      // 69\n  }                                                                                                                   // 70\n};                                                                                                                    // 71\n                                                                                                                      // 72\nOplogCheck.disableOplog = function(cursorDescription) {                                                               // 73\n  if(cursorDescription.options._disableOplog) {                                                                       // 74\n    return {                                                                                                          // 75\n      code: \"DISABLE_OPLOG\",                                                                                          // 76\n      reason: \"You've disable oplog for this cursor explicitly with _disableOplog option.\"                            // 77\n    };                                                                                                                // 78\n  } else {                                                                                                            // 79\n    return true;                                                                                                      // 80\n  }                                                                                                                   // 81\n};                                                                                                                    // 82\n                                                                                                                      // 83\n// when creating Minimongo.Matcher object, if that's throws an exception                                              // 84\n// meteor won't do the oplog support                                                                                  // 85\nOplogCheck.miniMongoMatcher = function(cursorDescription) {                                                           // 86\n  if(Minimongo.Matcher) {                                                                                             // 87\n    try {                                                                                                             // 88\n      var matcher = new Minimongo.Matcher(cursorDescription.selector);                                                // 89\n      return true;                                                                                                    // 90\n    } catch(ex) {                                                                                                     // 91\n      return {                                                                                                        // 92\n        code: \"MINIMONGO_MATCHER_ERROR\",                                                                              // 93\n        reason: \"There's something wrong in your mongo query: \" +  ex.message,                                        // 94\n        solution: \"Check your selector and change it accordingly.\"                                                    // 95\n      };                                                                                                              // 96\n    }                                                                                                                 // 97\n  } else {                                                                                                            // 98\n    // If there is no Minimongo.Matcher, we don't need to check this                                                  // 99\n    return true;                                                                                                      // 100\n  }                                                                                                                   // 101\n};                                                                                                                    // 102\n                                                                                                                      // 103\nOplogCheck.miniMongoSorter = function(cursorDescription) {                                                            // 104\n  var matcher = new Minimongo.Matcher(cursorDescription.selector);                                                    // 105\n  if(Minimongo.Sorter && cursorDescription.options.sort) {                                                            // 106\n    try {                                                                                                             // 107\n      var sorter = new Minimongo.Sorter(                                                                              // 108\n        cursorDescription.options.sort,                                                                               // 109\n        { matcher: matcher }                                                                                          // 110\n      );                                                                                                              // 111\n      return true;                                                                                                    // 112\n    } catch(ex) {                                                                                                     // 113\n      return {                                                                                                        // 114\n        code: \"MINIMONGO_SORTER_ERROR\",                                                                               // 115\n        reason: \"Some of your sort specifiers are not supported: \" + ex.message,                                      // 116\n        solution: \"Check your sort specifiers and chage them accordingly.\"                                            // 117\n      }                                                                                                               // 118\n    }                                                                                                                 // 119\n  } else {                                                                                                            // 120\n    return true;                                                                                                      // 121\n  }                                                                                                                   // 122\n};                                                                                                                    // 123\n                                                                                                                      // 124\nOplogCheck.fields = function(cursorDescription) {                                                                     // 125\n  var options = cursorDescription.options;                                                                            // 126\n  if(options.fields) {                                                                                                // 127\n    try {                                                                                                             // 128\n      LocalCollection._checkSupportedProjection(options.fields);                                                      // 129\n      return true;                                                                                                    // 130\n    } catch (e) {                                                                                                     // 131\n      if (e.name === \"MinimongoError\") {                                                                              // 132\n        return {                                                                                                      // 133\n          code: \"NOT_SUPPORTED_FIELDS\",                                                                               // 134\n          reason: \"Some of the field filters are not supported: \" + e.message,                                        // 135\n          solution: \"Try removing those field filters.\"                                                               // 136\n        };                                                                                                            // 137\n      } else {                                                                                                        // 138\n        throw e;                                                                                                      // 139\n      }                                                                                                               // 140\n    }                                                                                                                 // 141\n  }                                                                                                                   // 142\n  return true;                                                                                                        // 143\n};                                                                                                                    // 144\n                                                                                                                      // 145\nOplogCheck.skip = function(cursorDescription) {                                                                       // 146\n  if(cursorDescription.options.skip) {                                                                                // 147\n    return {                                                                                                          // 148\n      code: \"SKIP_NOT_SUPPORTED\",                                                                                     // 149\n      reason: \"Skip does not support with oplog.\",                                                                    // 150\n      solution: \"Try to avoid using skip. Use range queries instead: http://goo.gl/b522Av\"                            // 151\n    };                                                                                                                // 152\n  }                                                                                                                   // 153\n                                                                                                                      // 154\n  return true;                                                                                                        // 155\n};                                                                                                                    // 156\n                                                                                                                      // 157\nOplogCheck.where = function(cursorDescription) {                                                                      // 158\n  var matcher = new Minimongo.Matcher(cursorDescription.selector);                                                    // 159\n  if(matcher.hasWhere()) {                                                                                            // 160\n    return {                                                                                                          // 161\n      code: \"WHERE_NOT_SUPPORTED\",                                                                                    // 162\n      reason: \"Meteor does not support queries with $where.\",                                                         // 163\n      solution: \"Try to remove $where from your query. Use some alternative.\"                                         // 164\n    }                                                                                                                 // 165\n  };                                                                                                                  // 166\n                                                                                                                      // 167\n  return true;                                                                                                        // 168\n};                                                                                                                    // 169\n                                                                                                                      // 170\nOplogCheck.geo = function(cursorDescription) {                                                                        // 171\n  var matcher = new Minimongo.Matcher(cursorDescription.selector);                                                    // 172\n                                                                                                                      // 173\n  if(matcher.hasGeoQuery()) {                                                                                         // 174\n    return {                                                                                                          // 175\n      code: \"GEO_NOT_SUPPORTED\",                                                                                      // 176\n      reason: \"Meteor does not support queries with geo partial operators.\",                                          // 177\n      solution: \"Try to remove geo partial operators from your query if possible.\"                                    // 178\n    }                                                                                                                 // 179\n  };                                                                                                                  // 180\n                                                                                                                      // 181\n  return true;                                                                                                        // 182\n};                                                                                                                    // 183\n                                                                                                                      // 184\nOplogCheck.limitButNoSort = function(cursorDescription) {                                                             // 185\n  var options = cursorDescription.options;                                                                            // 186\n                                                                                                                      // 187\n  if((options.limit && !options.sort)) {                                                                              // 188\n    return {                                                                                                          // 189\n      code: \"LIMIT_NO_SORT\",                                                                                          // 190\n      reason: \"Meteor oplog implementation does not support limit without a sort specifier.\",                         // 191\n      solution: \"Try adding a sort specifier.\"                                                                        // 192\n    }                                                                                                                 // 193\n  };                                                                                                                  // 194\n                                                                                                                      // 195\n  return true;                                                                                                        // 196\n};                                                                                                                    // 197\n                                                                                                                      // 198\nOplogCheck.olderVersion = function(cursorDescription, driver) {                                                       // 199\n  if(driver && !driver.constructor.cursorSupported) {                                                                 // 200\n    return {                                                                                                          // 201\n      code: \"OLDER_VERSION\",                                                                                          // 202\n      reason: \"Your Meteor version does not have oplog support.\",                                                     // 203\n      solution: \"Upgrade your app to Meteor version 0.7.2 or later.\"                                                  // 204\n    };                                                                                                                // 205\n  }                                                                                                                   // 206\n  return true;                                                                                                        // 207\n};                                                                                                                    // 208\n                                                                                                                      // 209\nOplogCheck.gitCheckout = function(cursorDescription, driver) {                                                        // 210\n  if(!Meteor.release) {                                                                                               // 211\n    return {                                                                                                          // 212\n      code: \"GIT_CHECKOUT\",                                                                                           // 213\n      reason: \"Seems like your Meteor version is based on a Git checkout and it doesn't have the oplog support.\",     // 214\n      solution: \"Try to upgrade your Meteor version.\"                                                                 // 215\n    };                                                                                                                // 216\n  }                                                                                                                   // 217\n  return true;                                                                                                        // 218\n};                                                                                                                    // 219\n                                                                                                                      // 220\nvar preRunningMatchers = [                                                                                            // 221\n  OplogCheck.env,                                                                                                     // 222\n  OplogCheck.disableOplog,                                                                                            // 223\n  OplogCheck.miniMongoMatcher                                                                                         // 224\n];                                                                                                                    // 225\n                                                                                                                      // 226\nvar globalMatchers = [                                                                                                // 227\n  OplogCheck.fields,                                                                                                  // 228\n  OplogCheck.skip,                                                                                                    // 229\n  OplogCheck.where,                                                                                                   // 230\n  OplogCheck.geo,                                                                                                     // 231\n  OplogCheck.limitButNoSort,                                                                                          // 232\n  OplogCheck.miniMongoSorter,                                                                                         // 233\n  OplogCheck.olderVersion,                                                                                            // 234\n  OplogCheck.gitCheckout                                                                                              // 235\n];                                                                                                                    // 236\n                                                                                                                      // 237\nvar versionMatchers = [                                                                                               // 238\n  [/^0\\.7\\.1/, OplogCheck._071],                                                                                      // 239\n  [/^0\\.7\\.0/, OplogCheck._070],                                                                                      // 240\n];                                                                                                                    // 241\n                                                                                                                      // 242\nKadira.checkWhyNoOplog = function(cursorDescription, observerDriver) {                                                // 243\n  if(typeof Minimongo == 'undefined') {                                                                               // 244\n    return {                                                                                                          // 245\n      code: \"CANNOT_DETECT\",                                                                                          // 246\n      reason: \"You are running an older Meteor version and Kadira can't check oplog state.\",                          // 247\n      solution: \"Try updating your Meteor app\"                                                                        // 248\n    }                                                                                                                 // 249\n  }                                                                                                                   // 250\n                                                                                                                      // 251\n  var result = runMatchers(preRunningMatchers, cursorDescription, observerDriver);                                    // 252\n  if(result !== true) {                                                                                               // 253\n    return result;                                                                                                    // 254\n  }                                                                                                                   // 255\n                                                                                                                      // 256\n  var meteorVersion = Meteor.release;                                                                                 // 257\n  for(var lc=0; lc<versionMatchers.length; lc++) {                                                                    // 258\n    var matcherInfo = versionMatchers[lc];                                                                            // 259\n    if(matcherInfo[0].test(meteorVersion)) {                                                                          // 260\n      var matched = matcherInfo[1](cursorDescription, observerDriver);                                                // 261\n      if(matched !== true) {                                                                                          // 262\n        return matched;                                                                                               // 263\n      }                                                                                                               // 264\n    }                                                                                                                 // 265\n  }                                                                                                                   // 266\n                                                                                                                      // 267\n  result = runMatchers(globalMatchers, cursorDescription, observerDriver);                                            // 268\n  if(result !== true) {                                                                                               // 269\n    return result;                                                                                                    // 270\n  }                                                                                                                   // 271\n                                                                                                                      // 272\n  return {                                                                                                            // 273\n    code: \"OPLOG_SUPPORTED\",                                                                                          // 274\n    reason: \"This query should support oplog. It's weird if it's not.\",                                               // 275\n    solution: \"Please contact Kadira support and let's discuss.\"                                                      // 276\n  };                                                                                                                  // 277\n};                                                                                                                    // 278\n                                                                                                                      // 279\nfunction runMatchers(matcherList, cursorDescription, observerDriver) {                                                // 280\n  for(var lc=0; lc<matcherList.length; lc++) {                                                                        // 281\n    var matcher = matcherList[lc];                                                                                    // 282\n    var matched = matcher(cursorDescription, observerDriver);                                                         // 283\n    if(matched !== true) {                                                                                            // 284\n      return matched;                                                                                                 // 285\n    }                                                                                                                 // 286\n  }                                                                                                                   // 287\n  return true;                                                                                                        // 288\n}                                                                                                                     // 289\n                                                                                                                      // 290\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/tracer/tracer.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar Fibers = Npm.require('fibers');                                                                                   // 1\nvar eventLogger = Npm.require('debug')('kadira:tracer');                                                              // 2\nvar REPITITIVE_EVENTS = {'db': true, 'http': true, 'email': true, 'wait': true, 'async': true};                       // 3\n                                                                                                                      // 4\nTracer = function Tracer() {                                                                                          // 5\n  this._filters = [];                                                                                                 // 6\n};                                                                                                                    // 7\n                                                                                                                      // 8\n//In the future, we might wan't to track inner fiber events too.                                                      // 9\n//Then we can't serialize the object with methods                                                                     // 10\n//That's why we use this method of returning the data                                                                 // 11\nTracer.prototype.start = function(session, msg) {                                                                     // 12\n  var traceInfo = {                                                                                                   // 13\n    _id: session.id + \"::\" + msg.id,                                                                                  // 14\n    session: session.id,                                                                                              // 15\n    userId: session.userId,                                                                                           // 16\n    id: msg.id,                                                                                                       // 17\n    events: []                                                                                                        // 18\n  };                                                                                                                  // 19\n                                                                                                                      // 20\n  if(msg.msg == 'method') {                                                                                           // 21\n    traceInfo.type = 'method';                                                                                        // 22\n    traceInfo.name = msg.method;                                                                                      // 23\n  } else if(msg.msg == 'sub') {                                                                                       // 24\n    traceInfo.type = 'sub';                                                                                           // 25\n    traceInfo.name = msg.name;                                                                                        // 26\n  } else {                                                                                                            // 27\n    return null;                                                                                                      // 28\n  }                                                                                                                   // 29\n                                                                                                                      // 30\n  return traceInfo;                                                                                                   // 31\n};                                                                                                                    // 32\n                                                                                                                      // 33\nTracer.prototype.event = function(traceInfo, type, data) {                                                            // 34\n  // do not allow to proceed, if already completed or errored                                                         // 35\n  var lastEvent = this.getLastEvent(traceInfo);                                                                       // 36\n  if(lastEvent && ['complete', 'error'].indexOf(lastEvent.type) >= 0) {                                               // 37\n    return false;                                                                                                     // 38\n  }                                                                                                                   // 39\n                                                                                                                      // 40\n  //expecting a end event                                                                                             // 41\n  var eventId = true;                                                                                                 // 42\n                                                                                                                      // 43\n  //specially handling for repitivive events like db, http                                                            // 44\n  if(REPITITIVE_EVENTS[type]) {                                                                                       // 45\n    //can't accept a new start event                                                                                  // 46\n    if(traceInfo._lastEventId) {                                                                                      // 47\n      return false;                                                                                                   // 48\n    }                                                                                                                 // 49\n    eventId = traceInfo._lastEventId = DefaultUniqueId.get();                                                         // 50\n  }                                                                                                                   // 51\n                                                                                                                      // 52\n  var event = {type: type, at: Ntp._now()};                                                                           // 53\n  if(data) {                                                                                                          // 54\n    event.data = this._applyFilters(type, data, \"start\");;                                                            // 55\n  }                                                                                                                   // 56\n                                                                                                                      // 57\n  traceInfo.events.push(event);                                                                                       // 58\n                                                                                                                      // 59\n  eventLogger(\"%s %s\", type, traceInfo._id);                                                                          // 60\n  return eventId;                                                                                                     // 61\n};                                                                                                                    // 62\n                                                                                                                      // 63\nTracer.prototype.eventEnd = function(traceInfo, eventId, data) {                                                      // 64\n  if(traceInfo._lastEventId && traceInfo._lastEventId == eventId) {                                                   // 65\n    var lastEvent = this.getLastEvent(traceInfo);                                                                     // 66\n    var type = lastEvent.type + 'end';                                                                                // 67\n    var event = {type: type, at: Ntp._now()};                                                                         // 68\n    if(data) {                                                                                                        // 69\n      event.data = this._applyFilters(type, data, \"end\");;                                                            // 70\n    }                                                                                                                 // 71\n    traceInfo.events.push(event);                                                                                     // 72\n    eventLogger(\"%s %s\", type, traceInfo._id);                                                                        // 73\n                                                                                                                      // 74\n    traceInfo._lastEventId = null;                                                                                    // 75\n    return true;                                                                                                      // 76\n  } else {                                                                                                            // 77\n    return false;                                                                                                     // 78\n  }                                                                                                                   // 79\n};                                                                                                                    // 80\n                                                                                                                      // 81\nTracer.prototype.getLastEvent = function(traceInfo) {                                                                 // 82\n  return traceInfo.events[traceInfo.events.length -1]                                                                 // 83\n};                                                                                                                    // 84\n                                                                                                                      // 85\nTracer.prototype.endLastEvent = function(traceInfo) {                                                                 // 86\n  var lastEvent = this.getLastEvent(traceInfo);                                                                       // 87\n  if(lastEvent && !/end$/.test(lastEvent.type)) {                                                                     // 88\n    traceInfo.events.push({                                                                                           // 89\n      type: lastEvent.type + 'end',                                                                                   // 90\n      at: Ntp._now()                                                                                                  // 91\n    });                                                                                                               // 92\n    return true;                                                                                                      // 93\n  }                                                                                                                   // 94\n  return false;                                                                                                       // 95\n};                                                                                                                    // 96\n                                                                                                                      // 97\nTracer.prototype.buildTrace = function(traceInfo) {                                                                   // 98\n  var firstEvent = traceInfo.events[0];                                                                               // 99\n  var lastEvent = traceInfo.events[traceInfo.events.length - 1];                                                      // 100\n  var processedEvents = [];                                                                                           // 101\n                                                                                                                      // 102\n  if(firstEvent.type != 'start') {                                                                                    // 103\n    console.warn('Kadira: trace is not started yet');                                                                 // 104\n    return null;                                                                                                      // 105\n  } else if(lastEvent.type != 'complete' && lastEvent.type != 'error') {                                              // 106\n    //trace is not completed or errored yet                                                                           // 107\n    console.warn('Kadira: trace is not completed or errored yet');                                                    // 108\n    return null;                                                                                                      // 109\n  } else {                                                                                                            // 110\n    //build the metrics                                                                                               // 111\n    traceInfo.errored = lastEvent.type == 'error';                                                                    // 112\n    traceInfo.at = firstEvent.at;                                                                                     // 113\n                                                                                                                      // 114\n    var metrics = {                                                                                                   // 115\n      total: lastEvent.at - firstEvent.at,                                                                            // 116\n    };                                                                                                                // 117\n                                                                                                                      // 118\n    var totalNonCompute = 0;                                                                                          // 119\n                                                                                                                      // 120\n    firstEvent = ['start', 0];                                                                                        // 121\n    if(traceInfo.events[0].data) firstEvent.push(traceInfo.events[0].data);                                           // 122\n    processedEvents.push(firstEvent);                                                                                 // 123\n                                                                                                                      // 124\n    for(var lc=1; lc < traceInfo.events.length - 1; lc += 2) {                                                        // 125\n      var prevEventEnd = traceInfo.events[lc-1];                                                                      // 126\n      var startEvent = traceInfo.events[lc];                                                                          // 127\n      var endEvent = traceInfo.events[lc+1];                                                                          // 128\n      var computeTime = startEvent.at - prevEventEnd.at;                                                              // 129\n      if(computeTime > 0) processedEvents.push(['compute', computeTime]);                                             // 130\n      if(!endEvent) {                                                                                                 // 131\n        console.error('Kadira: no end event for type: ', startEvent.type);                                            // 132\n        return null;                                                                                                  // 133\n      } else if(endEvent.type != startEvent.type + 'end') {                                                           // 134\n        console.error('Kadira: endevent type mismatch: ', startEvent.type, endEvent.type, JSON.stringify(traceInfo)); // 135\n        return null;                                                                                                  // 136\n      } else {                                                                                                        // 137\n        var elapsedTimeForEvent = endEvent.at - startEvent.at                                                         // 138\n        var currentEvent = [startEvent.type, elapsedTimeForEvent];                                                    // 139\n        currentEvent.push(_.extend({}, startEvent.data, endEvent.data));                                              // 140\n        processedEvents.push(currentEvent);                                                                           // 141\n        metrics[startEvent.type] = metrics[startEvent.type] || 0;                                                     // 142\n        metrics[startEvent.type] += elapsedTimeForEvent;                                                              // 143\n        totalNonCompute += elapsedTimeForEvent;                                                                       // 144\n      }                                                                                                               // 145\n    }                                                                                                                 // 146\n                                                                                                                      // 147\n    computeTime = lastEvent.at - traceInfo.events[traceInfo.events.length - 2];                                       // 148\n    if(computeTime > 0) processedEvents.push(['compute', computeTime]);                                               // 149\n                                                                                                                      // 150\n    var lastEventData = [lastEvent.type, 0];                                                                          // 151\n    if(lastEvent.data) lastEventData.push(lastEvent.data);                                                            // 152\n    processedEvents.push(lastEventData);                                                                              // 153\n                                                                                                                      // 154\n    metrics.compute = metrics.total - totalNonCompute;                                                                // 155\n    traceInfo.metrics = metrics;                                                                                      // 156\n    traceInfo.events = processedEvents;                                                                               // 157\n    traceInfo.isEventsProcessed = true;                                                                               // 158\n    return traceInfo;                                                                                                 // 159\n  }                                                                                                                   // 160\n};                                                                                                                    // 161\n                                                                                                                      // 162\nTracer.prototype.addFilter = function(filterFn) {                                                                     // 163\n  this._filters.push(filterFn);                                                                                       // 164\n};                                                                                                                    // 165\n                                                                                                                      // 166\nTracer.prototype._applyFilters = function(eventType, data) {                                                          // 167\n  this._filters.forEach(function(filterFn) {                                                                          // 168\n    data = filterFn(eventType, _.clone(data));                                                                        // 169\n  });                                                                                                                 // 170\n                                                                                                                      // 171\n  return data;                                                                                                        // 172\n};                                                                                                                    // 173\n                                                                                                                      // 174\nKadira.tracer = new Tracer();                                                                                         // 175\n// need to expose Tracer to provide default set of filters                                                            // 176\nKadira.Tracer = Tracer;                                                                                               // 177\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/tracer/default_filters.js                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// strip sensitive data sent to kadia engine.                                                                         // 1\n// possible to limit types by providing an array of types to strip                                                    // 2\n// possible types are: \"start\", \"db\", \"http\", \"email\"                                                                 // 3\nTracer.stripSensitive = function stripSensitive(typesToStrip) {                                                       // 4\n  typesToStrip =  typesToStrip || [];                                                                                 // 5\n                                                                                                                      // 6\n  var allowedTypes = {};                                                                                              // 7\n  typesToStrip.forEach(function(type) {                                                                               // 8\n    allowedTypes[type] = true;                                                                                        // 9\n  });                                                                                                                 // 10\n                                                                                                                      // 11\n  return function (type, data) {                                                                                      // 12\n    if(typesToStrip.length > 0 && !allowedTypes[type]) return data;                                                   // 13\n                                                                                                                      // 14\n    if(type == \"start\") {                                                                                             // 15\n      data.params = \"[stripped]\";                                                                                     // 16\n    } else if(type == \"db\") {                                                                                         // 17\n      data.selector = \"[stripped]\";                                                                                   // 18\n    } else if(type == \"http\") {                                                                                       // 19\n      data.url = \"[stripped]\";                                                                                        // 20\n    } else if(type == \"email\") {                                                                                      // 21\n      [\"from\", \"to\", \"cc\", \"bcc\", \"replyTo\"].forEach(function(item) {                                                 // 22\n        if(data[item]) {                                                                                              // 23\n          data[item] = \"[stripped]\";                                                                                  // 24\n        }                                                                                                             // 25\n      });                                                                                                             // 26\n    }                                                                                                                 // 27\n                                                                                                                      // 28\n    return data;                                                                                                      // 29\n  };                                                                                                                  // 30\n};                                                                                                                    // 31\n                                                                                                                      // 32\n// strip selectors only from the given list of collection names                                                       // 33\nTracer.stripSelectors = function stripSelectors(collectionList) {                                                     // 34\n  collectionList = collectionList || [];                                                                              // 35\n                                                                                                                      // 36\n  var collMap = {};                                                                                                   // 37\n  collectionList.forEach(function(collName) {                                                                         // 38\n    collMap[collName] = true;                                                                                         // 39\n  });                                                                                                                 // 40\n                                                                                                                      // 41\n  return function(type, data) {                                                                                       // 42\n    if(type == \"db\" && data && collMap[data.coll]) {                                                                  // 43\n      data.selector = \"[stripped]\";                                                                                   // 44\n    }                                                                                                                 // 45\n                                                                                                                      // 46\n    return data;                                                                                                      // 47\n  };                                                                                                                  // 48\n}                                                                                                                     // 49\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/tracer/tracer_store.js                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar logger = Npm.require('debug')('kadira:ts');                                                                       // 1\n                                                                                                                      // 2\nTracerStore = function TracerStore(options) {                                                                         // 3\n  options = options || {};                                                                                            // 4\n                                                                                                                      // 5\n  this.maxTotalPoints = options.maxTotalPoints || 30;                                                                 // 6\n  this.interval = options.interval || 1000 * 60;                                                                      // 7\n  this.archiveEvery = options.archiveEvery || this.maxTotalPoints / 6;                                                // 8\n                                                                                                                      // 9\n  //store max total on the past 30 minutes (or past 30 items)                                                         // 10\n  this.maxTotals = {};                                                                                                // 11\n  //store the max trace of the current interval                                                                       // 12\n  this.currentMaxTrace = {};                                                                                          // 13\n  //archive for the traces                                                                                            // 14\n  this.traceArchive = [];                                                                                             // 15\n                                                                                                                      // 16\n  this.processedCnt = {};                                                                                             // 17\n                                                                                                                      // 18\n  //group errors by messages between an interval                                                                      // 19\n  this.errorMap = {};                                                                                                 // 20\n};                                                                                                                    // 21\n                                                                                                                      // 22\nTracerStore.prototype.addTrace = function(trace) {                                                                    // 23\n  var kind = [trace.type, trace.name].join('::');                                                                     // 24\n  if(!this.currentMaxTrace[kind]) {                                                                                   // 25\n    this.currentMaxTrace[kind] = EJSON.clone(trace);                                                                  // 26\n  } else if(this.currentMaxTrace[kind].metrics.total < trace.metrics.total) {                                         // 27\n    this.currentMaxTrace[kind] = EJSON.clone(trace);                                                                  // 28\n  } else if(trace.errored) {                                                                                          // 29\n    this._handleErrors(trace);                                                                                        // 30\n  }                                                                                                                   // 31\n};                                                                                                                    // 32\n                                                                                                                      // 33\nTracerStore.prototype.collectTraces = function() {                                                                    // 34\n  var traces = this.traceArchive;                                                                                     // 35\n  this.traceArchive = [];                                                                                             // 36\n                                                                                                                      // 37\n  // convert at(timestamp) into the actual serverTime                                                                 // 38\n  traces.forEach(function(trace) {                                                                                    // 39\n    trace.at = Kadira.syncedDate.syncTime(trace.at);                                                                  // 40\n  });                                                                                                                 // 41\n  return traces;                                                                                                      // 42\n};                                                                                                                    // 43\n                                                                                                                      // 44\nTracerStore.prototype.start = function() {                                                                            // 45\n  this._timeoutHandler = setInterval(this.processTraces.bind(this), this.interval);                                   // 46\n};                                                                                                                    // 47\n                                                                                                                      // 48\nTracerStore.prototype.stop = function() {                                                                             // 49\n  if(this._timeoutHandler) {                                                                                          // 50\n    clearInterval(this._timeoutHandler);                                                                              // 51\n  }                                                                                                                   // 52\n};                                                                                                                    // 53\n                                                                                                                      // 54\nTracerStore.prototype._handleErrors = function(trace) {                                                               // 55\n  // sending error requests as it is                                                                                  // 56\n  var lastEvent = trace.events[trace.events.length -1];                                                               // 57\n  if(lastEvent && lastEvent[2]) {                                                                                     // 58\n    var error = lastEvent[2].error;                                                                                   // 59\n                                                                                                                      // 60\n    // grouping errors occured (reset after processTraces)                                                            // 61\n    var errorKey = [trace.type, trace.name, error.message].join(\"::\");                                                // 62\n    if(!this.errorMap[errorKey]) {                                                                                    // 63\n      var erroredTrace = EJSON.clone(trace);                                                                          // 64\n      this.errorMap[errorKey] = erroredTrace;                                                                         // 65\n                                                                                                                      // 66\n      this.traceArchive.push(erroredTrace);                                                                           // 67\n    }                                                                                                                 // 68\n  } else {                                                                                                            // 69\n    logger('last events is not an error: ', JSON.stringify(trace.events));                                            // 70\n  }                                                                                                                   // 71\n};                                                                                                                    // 72\n                                                                                                                      // 73\nTracerStore.prototype.processTraces = function() {                                                                    // 74\n  var self = this;                                                                                                    // 75\n  var kinds = _.union(                                                                                                // 76\n    _.keys(this.maxTotals),                                                                                           // 77\n    _.keys(this.currentMaxTrace)                                                                                      // 78\n  );                                                                                                                  // 79\n                                                                                                                      // 80\n  kinds.forEach(function(kind) {                                                                                      // 81\n    self.processedCnt[kind] = self.processedCnt[kind] || 0;                                                           // 82\n    var currentMaxTrace = self.currentMaxTrace[kind];                                                                 // 83\n    var currentMaxTotal = currentMaxTrace? currentMaxTrace.metrics.total : 0;                                         // 84\n                                                                                                                      // 85\n    self.maxTotals[kind] = self.maxTotals[kind] || [];                                                                // 86\n    //add the current maxPoint                                                                                        // 87\n    self.maxTotals[kind].push(currentMaxTotal);                                                                       // 88\n    var exceedingPoints = self.maxTotals[kind].length - self.maxTotalPoints;                                          // 89\n    if(exceedingPoints > 0) {                                                                                         // 90\n      self.maxTotals[kind].splice(0, exceedingPoints);                                                                // 91\n    }                                                                                                                 // 92\n                                                                                                                      // 93\n    var archiveDefault = (self.processedCnt[kind] % self.archiveEvery) == 0;                                          // 94\n    self.processedCnt[kind]++;                                                                                        // 95\n                                                                                                                      // 96\n    var canArchive = archiveDefault                                                                                   // 97\n      || self._isTraceOutlier(kind, currentMaxTrace);                                                                 // 98\n                                                                                                                      // 99\n    if(canArchive && currentMaxTrace) {                                                                               // 100\n      self.traceArchive.push(currentMaxTrace);                                                                        // 101\n    }                                                                                                                 // 102\n                                                                                                                      // 103\n    //reset currentMaxTrace                                                                                           // 104\n    self.currentMaxTrace[kind] = null;                                                                                // 105\n  });                                                                                                                 // 106\n                                                                                                                      // 107\n  //reset the errorMap                                                                                                // 108\n  self.errorMap = {};                                                                                                 // 109\n};                                                                                                                    // 110\n                                                                                                                      // 111\nTracerStore.prototype._isTraceOutlier = function(kind, trace) {                                                       // 112\n  if(trace) {                                                                                                         // 113\n    var dataSet = this.maxTotals[kind];                                                                               // 114\n    return this._isOutlier(dataSet, trace.metrics.total, 3);                                                          // 115\n  } else {                                                                                                            // 116\n    return false;                                                                                                     // 117\n  }                                                                                                                   // 118\n};                                                                                                                    // 119\n                                                                                                                      // 120\n/*                                                                                                                    // 121\n  Data point must exists in the dataSet                                                                               // 122\n*/                                                                                                                    // 123\nTracerStore.prototype._isOutlier = function(dataSet, dataPoint, maxMadZ) {                                            // 124\n  var median = this._getMedian(dataSet);                                                                              // 125\n  var mad = this._calculateMad(dataSet, median);                                                                      // 126\n  var madZ = this._funcMedianDeviation(median)(dataPoint) / mad;                                                      // 127\n                                                                                                                      // 128\n  return madZ > maxMadZ;                                                                                              // 129\n};                                                                                                                    // 130\n                                                                                                                      // 131\nTracerStore.prototype._getMedian = function(dataSet) {                                                                // 132\n  var sortedDataSet = _.clone(dataSet).sort(function(a, b) {                                                          // 133\n    return a-b;                                                                                                       // 134\n  });                                                                                                                 // 135\n  return this._pickQuartile(sortedDataSet, 2);                                                                        // 136\n};                                                                                                                    // 137\n                                                                                                                      // 138\nTracerStore.prototype._pickQuartile = function(dataSet, num) {                                                        // 139\n  var pos = ((dataSet.length + 1) * num) / 4;                                                                         // 140\n  if(pos % 1 == 0) {                                                                                                  // 141\n    return dataSet[pos -1];                                                                                           // 142\n  } else {                                                                                                            // 143\n    pos = pos - (pos % 1);                                                                                            // 144\n    return (dataSet[pos -1] + dataSet[pos])/2                                                                         // 145\n  }                                                                                                                   // 146\n};                                                                                                                    // 147\n                                                                                                                      // 148\nTracerStore.prototype._calculateMad = function(dataSet, median) {                                                     // 149\n  var medianDeviations = _.map(dataSet, this._funcMedianDeviation(median));                                           // 150\n  var mad = this._getMedian(medianDeviations);                                                                        // 151\n                                                                                                                      // 152\n  return mad;                                                                                                         // 153\n};                                                                                                                    // 154\n                                                                                                                      // 155\nTracerStore.prototype._funcMedianDeviation = function(median) {                                                       // 156\n  return function(x) {                                                                                                // 157\n    return Math.abs(median - x);                                                                                      // 158\n  };                                                                                                                  // 159\n};                                                                                                                    // 160\n                                                                                                                      // 161\nTracerStore.prototype._getMean = function(dataPoints) {                                                               // 162\n  if(dataPoints.length > 0) {                                                                                         // 163\n    var total = 0;                                                                                                    // 164\n    dataPoints.forEach(function(point) {                                                                              // 165\n      total += point;                                                                                                 // 166\n    });                                                                                                               // 167\n    return total/dataPoints.length;                                                                                   // 168\n  } else {                                                                                                            // 169\n    return 0;                                                                                                         // 170\n  }                                                                                                                   // 171\n};                                                                                                                    // 172\n                                                                                                                      // 173\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/models/0model.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nKadiraModel = function() {                                                                                            // 1\n                                                                                                                      // 2\n};                                                                                                                    // 3\n                                                                                                                      // 4\nKadiraModel.prototype._getDateId = function(timestamp) {                                                              // 5\n  var remainder = timestamp % (1000 * 60);                                                                            // 6\n  var dateId = timestamp - remainder;                                                                                 // 7\n  return dateId;                                                                                                      // 8\n};                                                                                                                    // 9\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/models/methods.js                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar METHOD_METRICS_FIELDS = ['wait', 'db', 'http', 'email', 'async', 'compute', 'total'];                             // 1\n                                                                                                                      // 2\nMethodsModel = function (metricsThreshold) {                                                                          // 3\n  var self = this;                                                                                                    // 4\n                                                                                                                      // 5\n  this.methodMetricsByMinute = {};                                                                                    // 6\n  this.errorMap = {};                                                                                                 // 7\n                                                                                                                      // 8\n  this._metricsThreshold = _.extend({                                                                                 // 9\n    \"wait\": 100,                                                                                                      // 10\n    \"db\": 100,                                                                                                        // 11\n    \"http\": 1000,                                                                                                     // 12\n    \"email\": 100,                                                                                                     // 13\n    \"async\": 100,                                                                                                     // 14\n    \"compute\": 100,                                                                                                   // 15\n    \"total\": 200                                                                                                      // 16\n  }, metricsThreshold || {});                                                                                         // 17\n                                                                                                                      // 18\n  //store max time elapsed methods for each method, event(metrics-field)                                              // 19\n  this.maxEventTimesForMethods = {};                                                                                  // 20\n                                                                                                                      // 21\n  this.tracerStore = new TracerStore({                                                                                // 22\n    interval: 1000 * 60, //process traces every minute                                                                // 23\n    maxTotalPoints: 30, //for 30 minutes                                                                              // 24\n    archiveEvery: 5 //always trace for every 5 minutes,                                                               // 25\n  });                                                                                                                 // 26\n                                                                                                                      // 27\n  this.tracerStore.start();                                                                                           // 28\n};                                                                                                                    // 29\n                                                                                                                      // 30\n_.extend(MethodsModel.prototype, KadiraModel.prototype);                                                              // 31\n                                                                                                                      // 32\nMethodsModel.prototype.processMethod = function(methodTrace) {                                                        // 33\n  var dateId = this._getDateId(methodTrace.at);                                                                       // 34\n                                                                                                                      // 35\n  //append metrics to previous values                                                                                 // 36\n  this._appendMetrics(dateId, methodTrace);                                                                           // 37\n  if(methodTrace.errored) {                                                                                           // 38\n    this.methodMetricsByMinute[dateId].methods[methodTrace.name].errors ++                                            // 39\n  }                                                                                                                   // 40\n                                                                                                                      // 41\n  this.tracerStore.addTrace(methodTrace);                                                                             // 42\n};                                                                                                                    // 43\n                                                                                                                      // 44\nMethodsModel.prototype._appendMetrics = function(id, methodTrace) {                                                   // 45\n  //initialize meteric for this time interval                                                                         // 46\n  if(!this.methodMetricsByMinute[id]) {                                                                               // 47\n    this.methodMetricsByMinute[id] = {                                                                                // 48\n      // startTime needs to be converted into serverTime before sending                                               // 49\n      startTime: methodTrace.at,                                                                                      // 50\n      methods: {}                                                                                                     // 51\n    };                                                                                                                // 52\n  }                                                                                                                   // 53\n                                                                                                                      // 54\n  var methods = this.methodMetricsByMinute[id].methods;                                                               // 55\n                                                                                                                      // 56\n  //initialize method                                                                                                 // 57\n  if(!methods[methodTrace.name]) {                                                                                    // 58\n    methods[methodTrace.name] = {                                                                                     // 59\n      count: 0,                                                                                                       // 60\n      errors: 0                                                                                                       // 61\n    };                                                                                                                // 62\n                                                                                                                      // 63\n    METHOD_METRICS_FIELDS.forEach(function(field) {                                                                   // 64\n      methods[methodTrace.name][field] = 0;                                                                           // 65\n    });                                                                                                               // 66\n  }                                                                                                                   // 67\n                                                                                                                      // 68\n  //merge                                                                                                             // 69\n  METHOD_METRICS_FIELDS.forEach(function(field) {                                                                     // 70\n    var value = methodTrace.metrics[field];                                                                           // 71\n    if(value > 0) {                                                                                                   // 72\n      methods[methodTrace.name][field] += value;                                                                      // 73\n    }                                                                                                                 // 74\n  });                                                                                                                 // 75\n                                                                                                                      // 76\n  methods[methodTrace.name].count++;                                                                                  // 77\n  this.methodMetricsByMinute[id].endTime = methodTrace.metrics.at;                                                    // 78\n};                                                                                                                    // 79\n                                                                                                                      // 80\n/*                                                                                                                    // 81\n  There are two types of data                                                                                         // 82\n                                                                                                                      // 83\n  1. methodMetrics - metrics about the methods (for every 10 secs)                                                    // 84\n  2. methodRequests - raw method request. normally max, min for every 1 min and errors always                         // 85\n*/                                                                                                                    // 86\nMethodsModel.prototype.buildPayload = function(buildDetailedInfo) {                                                   // 87\n  var payload = {                                                                                                     // 88\n    methodMetrics: [],                                                                                                // 89\n    methodRequests: []                                                                                                // 90\n  };                                                                                                                  // 91\n                                                                                                                      // 92\n  //handling metrics                                                                                                  // 93\n  var methodMetricsByMinute = this.methodMetricsByMinute;                                                             // 94\n  this.methodMetricsByMinute = {};                                                                                    // 95\n                                                                                                                      // 96\n  //create final paylod for methodMetrics                                                                             // 97\n  for(var key in methodMetricsByMinute) {                                                                             // 98\n    var methodMetrics = methodMetricsByMinute[key];                                                                   // 99\n    // converting startTime into the actual serverTime                                                                // 100\n    var startTime = methodMetrics.startTime;                                                                          // 101\n    methodMetrics.startTime = Kadira.syncedDate.syncTime(startTime);                                                  // 102\n                                                                                                                      // 103\n    for(var methodName in methodMetrics.methods) {                                                                    // 104\n      METHOD_METRICS_FIELDS.forEach(function(field) {                                                                 // 105\n        methodMetrics.methods[methodName][field] /=                                                                   // 106\n          methodMetrics.methods[methodName].count;                                                                    // 107\n      });                                                                                                             // 108\n    }                                                                                                                 // 109\n                                                                                                                      // 110\n    payload.methodMetrics.push(methodMetricsByMinute[key]);                                                           // 111\n  }                                                                                                                   // 112\n                                                                                                                      // 113\n  //collect traces and send them with the payload                                                                     // 114\n  payload.methodRequests = this.tracerStore.collectTraces();                                                          // 115\n                                                                                                                      // 116\n  return payload;                                                                                                     // 117\n};                                                                                                                    // 118\n                                                                                                                      // 119\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/models/pubsub.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar logger = Npm.require('debug')('kadira:pubsub');                                                                   // 1\n                                                                                                                      // 2\nPubsubModel = function() {                                                                                            // 3\n  this.metricsByMinute = {};                                                                                          // 4\n  this.subscriptions = {};                                                                                            // 5\n                                                                                                                      // 6\n  this.tracerStore = new TracerStore({                                                                                // 7\n    interval: 1000 * 60, //process traces every minute                                                                // 8\n    maxTotalPoints: 30, //for 30 minutes                                                                              // 9\n    archiveEvery: 5 //always trace for every 5 minutes,                                                               // 10\n  });                                                                                                                 // 11\n                                                                                                                      // 12\n  this.tracerStore.start();                                                                                           // 13\n}                                                                                                                     // 14\n                                                                                                                      // 15\nPubsubModel.prototype._trackSub = function(session, msg) {                                                            // 16\n  logger('SUB:', session.id, msg.id, msg.name, msg.params);                                                           // 17\n  var publication = this._getPublicationName(msg.name);                                                               // 18\n  var subscriptionId = msg.id;                                                                                        // 19\n  var timestamp = Ntp._now();                                                                                         // 20\n  var metrics = this._getMetrics(timestamp, publication);                                                             // 21\n                                                                                                                      // 22\n  metrics.subs++;                                                                                                     // 23\n  this.subscriptions[msg.id] = {                                                                                      // 24\n    // We use localTime here, because when we used synedTime we might get                                             // 25\n    // minus or more than we've expected                                                                              // 26\n    //   (before serverTime diff changed overtime)                                                                    // 27\n    startTime: timestamp,                                                                                             // 28\n    publication: publication,                                                                                         // 29\n    params: msg.params,                                                                                               // 30\n    id: msg.id                                                                                                        // 31\n  };                                                                                                                  // 32\n                                                                                                                      // 33\n  //set session startedTime                                                                                           // 34\n  session._startTime = session._startTime || timestamp;                                                               // 35\n};                                                                                                                    // 36\n                                                                                                                      // 37\n_.extend(PubsubModel.prototype, KadiraModel.prototype);                                                               // 38\n                                                                                                                      // 39\nPubsubModel.prototype._trackUnsub = function(session, sub) {                                                          // 40\n  logger('UNSUB:', session.id, sub._subscriptionId);                                                                  // 41\n  var publication = this._getPublicationName(sub._name);                                                              // 42\n  var subscriptionId = sub._subscriptionId;                                                                           // 43\n  var subscriptionState = this.subscriptions[subscriptionId];                                                         // 44\n                                                                                                                      // 45\n  var startTime = null;                                                                                               // 46\n  //sometime, we don't have these states                                                                              // 47\n  if(subscriptionState) {                                                                                             // 48\n    startTime = subscriptionState.startTime;                                                                          // 49\n  } else {                                                                                                            // 50\n    //if this is null subscription, which is started automatically                                                    // 51\n    //hence, we don't have a state                                                                                    // 52\n    startTime = session._startTime;                                                                                   // 53\n  }                                                                                                                   // 54\n                                                                                                                      // 55\n  //in case, we can't get the startTime                                                                               // 56\n  if(startTime) {                                                                                                     // 57\n    var timestamp = Ntp._now();                                                                                       // 58\n    var metrics = this._getMetrics(timestamp, publication);                                                           // 59\n    //track the count                                                                                                 // 60\n    if(sub._name != null) {                                                                                           // 61\n      // we can't track subs for `null` publications.                                                                 // 62\n      // so we should not track unsubs too                                                                            // 63\n      metrics.unsubs++;                                                                                               // 64\n    }                                                                                                                 // 65\n    //use the current date to get the lifeTime of the subscription                                                    // 66\n    metrics.lifeTime += timestamp - startTime;                                                                        // 67\n    //this is place we can clean the subscriptionState if exists                                                      // 68\n    delete this.subscriptions[subscriptionId];                                                                        // 69\n  }                                                                                                                   // 70\n};                                                                                                                    // 71\n                                                                                                                      // 72\nPubsubModel.prototype._trackReady = function(session, sub, trace) {                                                   // 73\n  logger('READY:', session.id, sub._subscriptionId);                                                                  // 74\n  //use the current time to track the response time                                                                   // 75\n  var publication = this._getPublicationName(sub._name);                                                              // 76\n  var subscriptionId = sub._subscriptionId;                                                                           // 77\n  var timestamp = Ntp._now();                                                                                         // 78\n  var metrics = this._getMetrics(timestamp, publication);                                                             // 79\n                                                                                                                      // 80\n  var subscriptionState = this.subscriptions[subscriptionId];                                                         // 81\n  if(subscriptionState && !subscriptionState.readyTracked) {                                                          // 82\n    metrics.resTime += timestamp - subscriptionState.startTime;                                                       // 83\n    subscriptionState.readyTracked = true;                                                                            // 84\n  }                                                                                                                   // 85\n                                                                                                                      // 86\n  if(trace) {                                                                                                         // 87\n    this.tracerStore.addTrace(trace);                                                                                 // 88\n  }                                                                                                                   // 89\n};                                                                                                                    // 90\n                                                                                                                      // 91\nPubsubModel.prototype._trackError = function(session, sub, trace) {                                                   // 92\n  logger('ERROR:', session.id, sub._subscriptionId);                                                                  // 93\n  //use the current time to track the response time                                                                   // 94\n  var publication = this._getPublicationName(sub._name);                                                              // 95\n  var subscriptionId = sub._subscriptionId;                                                                           // 96\n  var timestamp = Ntp._now();                                                                                         // 97\n  var metrics = this._getMetrics(timestamp, publication);                                                             // 98\n                                                                                                                      // 99\n  metrics.errors++;                                                                                                   // 100\n                                                                                                                      // 101\n  if(trace) {                                                                                                         // 102\n    this.tracerStore.addTrace(trace);                                                                                 // 103\n  }                                                                                                                   // 104\n};                                                                                                                    // 105\n                                                                                                                      // 106\nPubsubModel.prototype._getMetrics = function(timestamp, publication) {                                                // 107\n  var dateId = this._getDateId(timestamp);                                                                            // 108\n                                                                                                                      // 109\n  if(!this.metricsByMinute[dateId]) {                                                                                 // 110\n    this.metricsByMinute[dateId] = {                                                                                  // 111\n      // startTime needs to be convert to serverTime before sending to the server                                     // 112\n      startTime: timestamp,                                                                                           // 113\n      pubs: {}                                                                                                        // 114\n    };                                                                                                                // 115\n  }                                                                                                                   // 116\n                                                                                                                      // 117\n  if(!this.metricsByMinute[dateId].pubs[publication]) {                                                               // 118\n    this.metricsByMinute[dateId].pubs[publication] = {                                                                // 119\n      subs: 0,                                                                                                        // 120\n      unsubs: 0,                                                                                                      // 121\n      resTime: 0,                                                                                                     // 122\n      activeSubs: 0,                                                                                                  // 123\n      activeDocs: 0,                                                                                                  // 124\n      lifeTime: 0,                                                                                                    // 125\n      totalObservers: 0,                                                                                              // 126\n      cachedObservers: 0,                                                                                             // 127\n      createdObservers: 0,                                                                                            // 128\n      deletedObservers: 0,                                                                                            // 129\n      errors: 0                                                                                                       // 130\n    };                                                                                                                // 131\n  }                                                                                                                   // 132\n                                                                                                                      // 133\n  return this.metricsByMinute[dateId].pubs[publication];                                                              // 134\n};                                                                                                                    // 135\n                                                                                                                      // 136\nPubsubModel.prototype._getPublicationName = function(name) {                                                          // 137\n  return name || \"null(autopublish)\";                                                                                 // 138\n};                                                                                                                    // 139\n                                                                                                                      // 140\nPubsubModel.prototype._getSubscriptionInfo = function() {                                                             // 141\n  var self = this;                                                                                                    // 142\n  var activeSubs = {};                                                                                                // 143\n  var activeDocs = {};                                                                                                // 144\n  var totalDocsSent = {};                                                                                             // 145\n  var totalDataSent = {};                                                                                             // 146\n  var totalObservers = {};                                                                                            // 147\n  var cachedObservers = {};                                                                                           // 148\n                                                                                                                      // 149\n  for(var sessionId in Meteor.default_server.sessions) {                                                              // 150\n    var session = Meteor.default_server.sessions[sessionId];                                                          // 151\n    _.each(session._namedSubs, countSubData);                                                                         // 152\n    _.each(session._universalSubs, countSubData);                                                                     // 153\n  }                                                                                                                   // 154\n                                                                                                                      // 155\n  var avgObserverReuse = {};                                                                                          // 156\n  _.each(totalObservers, function(value, publication) {                                                               // 157\n    avgObserverReuse[publication] = cachedObservers[publication] / totalObservers[publication];                       // 158\n  });                                                                                                                 // 159\n                                                                                                                      // 160\n  return {                                                                                                            // 161\n    activeSubs: activeSubs,                                                                                           // 162\n    activeDocs: activeDocs,                                                                                           // 163\n    avgObserverReuse: avgObserverReuse                                                                                // 164\n  };                                                                                                                  // 165\n                                                                                                                      // 166\n  function countSubData (sub) {                                                                                       // 167\n    var publication = self._getPublicationName(sub._name);                                                            // 168\n    countSubscriptions(sub, publication);                                                                             // 169\n    countDocuments(sub, publication);                                                                                 // 170\n    countObservers(sub, publication);                                                                                 // 171\n  }                                                                                                                   // 172\n                                                                                                                      // 173\n  function countSubscriptions (sub, publication) {                                                                    // 174\n    activeSubs[publication] = activeSubs[publication] || 0;                                                           // 175\n    activeSubs[publication]++;                                                                                        // 176\n  }                                                                                                                   // 177\n                                                                                                                      // 178\n  function countDocuments (sub, publication) {                                                                        // 179\n    activeDocs[publication] = activeDocs[publication] || 0;                                                           // 180\n    for(collectionName in sub._documents) {                                                                           // 181\n      activeDocs[publication] += _.keys(sub._documents[collectionName]).length;                                       // 182\n    }                                                                                                                 // 183\n  }                                                                                                                   // 184\n                                                                                                                      // 185\n  function countObservers(sub, publication) {                                                                         // 186\n    totalObservers[publication] = totalObservers[publication] || 0;                                                   // 187\n    cachedObservers[publication] = cachedObservers[publication] || 0;                                                 // 188\n                                                                                                                      // 189\n    totalObservers[publication] += sub._totalObservers;                                                               // 190\n    cachedObservers[publication] += sub._cachedObservers;                                                             // 191\n  }                                                                                                                   // 192\n}                                                                                                                     // 193\n                                                                                                                      // 194\nPubsubModel.prototype.buildPayload = function(buildDetailInfo) {                                                      // 195\n  var metricsByMinute = this.metricsByMinute;                                                                         // 196\n  this.metricsByMinute = {};                                                                                          // 197\n                                                                                                                      // 198\n  var payload = {                                                                                                     // 199\n    pubMetrics: []                                                                                                    // 200\n  };                                                                                                                  // 201\n                                                                                                                      // 202\n  var subscriptionData = this._getSubscriptionInfo();                                                                 // 203\n  var activeSubs = subscriptionData.activeSubs;                                                                       // 204\n  var activeDocs = subscriptionData.activeDocs;                                                                       // 205\n  var avgObserverReuse = subscriptionData.avgObserverReuse;                                                           // 206\n                                                                                                                      // 207\n  //to the averaging                                                                                                  // 208\n  for(var dateId in metricsByMinute) {                                                                                // 209\n    var dateMetrics = metricsByMinute[dateId];                                                                        // 210\n    // We need to convert startTime into actual serverTime                                                            // 211\n    dateMetrics.startTime = Kadira.syncedDate.syncTime(dateMetrics.startTime);                                        // 212\n                                                                                                                      // 213\n    for(var publication in metricsByMinute[dateId].pubs) {                                                            // 214\n      var singlePubMetrics = metricsByMinute[dateId].pubs[publication];                                               // 215\n      // We only calculate resTime for new subscriptions                                                              // 216\n      singlePubMetrics.resTime /= singlePubMetrics.subs;                                                              // 217\n      singlePubMetrics.resTime = singlePubMetrics.resTime || 0;                                                       // 218\n      // We only track lifeTime in the unsubs                                                                         // 219\n      singlePubMetrics.lifeTime /= singlePubMetrics.unsubs;                                                           // 220\n      singlePubMetrics.lifeTime = singlePubMetrics.lifeTime || 0;                                                     // 221\n                                                                                                                      // 222\n      // This is a very efficient solution. We can come up with another solution                                      // 223\n      // which maintains the count inside the API.                                                                    // 224\n      // But for now, this is the most reliable method.                                                               // 225\n                                                                                                                      // 226\n      // If there are two ore more dateIds, we will be using the currentCount for all of them.                        // 227\n      // We can come up with a better solution later on.                                                              // 228\n      singlePubMetrics.activeSubs = activeSubs[publication] || 0;                                                     // 229\n      singlePubMetrics.activeDocs = activeDocs[publication] || 0;                                                     // 230\n      singlePubMetrics.avgObserverReuse = avgObserverReuse[publication] || 0;                                         // 231\n    }                                                                                                                 // 232\n    payload.pubMetrics.push(metricsByMinute[dateId]);                                                                 // 233\n  }                                                                                                                   // 234\n                                                                                                                      // 235\n  //collect traces and send them with the payload                                                                     // 236\n  payload.pubRequests = this.tracerStore.collectTraces();                                                             // 237\n                                                                                                                      // 238\n  return payload;                                                                                                     // 239\n};                                                                                                                    // 240\n                                                                                                                      // 241\nPubsubModel.prototype.incrementHandleCount = function(trace, isCached) {                                              // 242\n  var publicationName = trace.name;                                                                                   // 243\n  var timestamp = Ntp._now();                                                                                         // 244\n  var publication = this._getMetrics(timestamp, publicationName);                                                     // 245\n                                                                                                                      // 246\n  var session = Meteor.default_server.sessions[trace.session];                                                        // 247\n  if(session) {                                                                                                       // 248\n    var sub = session._namedSubs[trace.id];                                                                           // 249\n    if(sub) {                                                                                                         // 250\n      sub._totalObservers = sub._totalObservers || 0;                                                                 // 251\n      sub._cachedObservers = sub._cachedObservers || 0;                                                               // 252\n    }                                                                                                                 // 253\n  }                                                                                                                   // 254\n  // not sure, we need to do this? But I don't need to break the however                                              // 255\n  sub = sub || {_totalObservers:0 , _cachedObservers: 0};                                                             // 256\n                                                                                                                      // 257\n  publication.totalObservers++;                                                                                       // 258\n  sub._totalObservers++;                                                                                              // 259\n  if(isCached) {                                                                                                      // 260\n    publication.cachedObservers++;                                                                                    // 261\n    sub._cachedObservers++;                                                                                           // 262\n  }                                                                                                                   // 263\n}                                                                                                                     // 264\n                                                                                                                      // 265\nPubsubModel.prototype.trackCreatedObserver = function(info) {                                                         // 266\n  var timestamp = Ntp._now();                                                                                         // 267\n  var publication = this._getMetrics(timestamp, info.name);                                                           // 268\n  publication.createdObservers++;                                                                                     // 269\n}                                                                                                                     // 270\n                                                                                                                      // 271\nPubsubModel.prototype.trackDeletedObserver = function(info) {                                                         // 272\n  var timestamp = Ntp._now();                                                                                         // 273\n  var publication = this._getMetrics(timestamp, info.name);                                                           // 274\n  publication.deletedObservers++;                                                                                     // 275\n}                                                                                                                     // 276\n                                                                                                                      // 277\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/models/system.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar os = Npm.require('os');                                                                                           // 1\nvar usage = Npm.require('pidusage');                                                                                  // 2\nvar EventLoopMonitor = Npm.require('evloop-monitor');                                                                 // 3\n                                                                                                                      // 4\nSystemModel = function () {                                                                                           // 5\n  var self = this;                                                                                                    // 6\n  this.startTime = Ntp._now();                                                                                        // 7\n  this.newSessions = 0;                                                                                               // 8\n  this.sessionTimeout = 1000 * 60 * 30; //30 min                                                                      // 9\n                                                                                                                      // 10\n  this.usageLookup = Kadira._wrapAsync(usage.stat.bind(usage));                                                       // 11\n  this.evloopMonitor = new EventLoopMonitor(200);                                                                     // 12\n  this.evloopMonitor.start();                                                                                         // 13\n}                                                                                                                     // 14\n                                                                                                                      // 15\n_.extend(SystemModel.prototype, KadiraModel.prototype);                                                               // 16\n                                                                                                                      // 17\nSystemModel.prototype.buildPayload = function() {                                                                     // 18\n  var metrics = {};                                                                                                   // 19\n  var now = Ntp._now();                                                                                               // 20\n  metrics.startTime = Kadira.syncedDate.syncTime(this.startTime);                                                     // 21\n  metrics.endTime = Kadira.syncedDate.syncTime(now);                                                                  // 22\n                                                                                                                      // 23\n  metrics.sessions = _.keys(Meteor.default_server.sessions).length;                                                   // 24\n  metrics.memory = process.memoryUsage().rss / (1024*1024);                                                           // 25\n  metrics.newSessions = this.newSessions;                                                                             // 26\n  this.newSessions = 0;                                                                                               // 27\n                                                                                                                      // 28\n  var usage = this.getUsage();                                                                                        // 29\n  metrics.pcpu = usage.cpu;                                                                                           // 30\n  if(usage.cpuInfo) {                                                                                                 // 31\n    metrics.cputime = usage.cpuInfo.cpuTime;                                                                          // 32\n    metrics.pcpuUser = usage.cpuInfo.pcpuUser;                                                                        // 33\n    metrics.pcpuSystem = usage.cpuInfo.pcpuSystem;                                                                    // 34\n  }                                                                                                                   // 35\n                                                                                                                      // 36\n  // track eventloop blockness                                                                                        // 37\n  metrics.pctEvloopBlock = this.evloopMonitor.status().pctBlock;                                                      // 38\n                                                                                                                      // 39\n  this.startTime = now;                                                                                               // 40\n  return {systemMetrics: [metrics]};                                                                                  // 41\n};                                                                                                                    // 42\n                                                                                                                      // 43\nSystemModel.prototype.getUsage = function() {                                                                         // 44\n  return this.usageLookup(process.pid) || {};                                                                         // 45\n};                                                                                                                    // 46\n                                                                                                                      // 47\nSystemModel.prototype.handleSessionActivity = function(msg, session) {                                                // 48\n  if(msg.msg === 'connect' && !msg.session) {                                                                         // 49\n    this.countNewSession(session);                                                                                    // 50\n  } else if(['sub', 'method'].indexOf(msg.msg) != -1) {                                                               // 51\n    if(!this.isSessionActive(session)) {                                                                              // 52\n      this.countNewSession(session);                                                                                  // 53\n    }                                                                                                                 // 54\n  }                                                                                                                   // 55\n  session._activeAt = Date.now();                                                                                     // 56\n}                                                                                                                     // 57\n                                                                                                                      // 58\nSystemModel.prototype.countNewSession = function(session) {                                                           // 59\n  if(!isLocalAddress(session.socket)) {                                                                               // 60\n    this.newSessions++;                                                                                               // 61\n  }                                                                                                                   // 62\n}                                                                                                                     // 63\n                                                                                                                      // 64\nSystemModel.prototype.isSessionActive = function(session) {                                                           // 65\n  var inactiveTime = Date.now() - session._activeAt;                                                                  // 66\n  return inactiveTime < this.sessionTimeout;                                                                          // 67\n}                                                                                                                     // 68\n                                                                                                                      // 69\n// ------------------------------------------------------------------------- //                                       // 70\n                                                                                                                      // 71\n// http://regex101.com/r/iF3yR3/2                                                                                     // 72\nvar isLocalHostRegex = /^(?:.*\\.local|localhost)(?:\\:\\d+)?|127(?:\\.\\d{1,3}){3}|192\\.168(?:\\.\\d{1,3}){2}|10(?:\\.\\d{1,3}){3}|172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2}$/;\n                                                                                                                      // 74\n// http://regex101.com/r/hM5gD8/1                                                                                     // 75\nvar isLocalAddressRegex = /^127(?:\\.\\d{1,3}){3}|192\\.168(?:\\.\\d{1,3}){2}|10(?:\\.\\d{1,3}){3}|172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2}$/;\n                                                                                                                      // 77\nfunction isLocalAddress (socket) {                                                                                    // 78\n  var host = socket.headers['host'];                                                                                  // 79\n  if(host) return isLocalHostRegex.test(host);                                                                        // 80\n  var address = socket.headers['x-forwarded-for'] || socket.remoteAddress;                                            // 81\n  if(address) return isLocalAddressRegex.test(address);                                                               // 82\n}                                                                                                                     // 83\n                                                                                                                      // 84\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/models/errors.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nErrorModel = function (appId) {                                                                                       // 1\n  BaseErrorModel.call(this);                                                                                          // 2\n  var self = this;                                                                                                    // 3\n  this.appId = appId;                                                                                                 // 4\n  this.errors = {};                                                                                                   // 5\n  this.startTime = Date.now();                                                                                        // 6\n  this.maxErrors = 10;                                                                                                // 7\n}                                                                                                                     // 8\n                                                                                                                      // 9\n_.extend(ErrorModel.prototype, KadiraModel.prototype);                                                                // 10\n_.extend(ErrorModel.prototype, BaseErrorModel.prototype);                                                             // 11\n                                                                                                                      // 12\nErrorModel.prototype.buildPayload = function() {                                                                      // 13\n  var metrics = _.values(this.errors);                                                                                // 14\n  this.startTime = Ntp._now();                                                                                        // 15\n                                                                                                                      // 16\n  _.each(metrics, function (metric) {                                                                                 // 17\n    metric.startTime = Kadira.syncedDate.syncTime(metric.startTime)                                                   // 18\n  });                                                                                                                 // 19\n                                                                                                                      // 20\n  this.errors = {};                                                                                                   // 21\n  return {errors: metrics};                                                                                           // 22\n};                                                                                                                    // 23\n                                                                                                                      // 24\nErrorModel.prototype.errorCount = function () {                                                                       // 25\n  return _.values(this.errors).length;                                                                                // 26\n};                                                                                                                    // 27\n                                                                                                                      // 28\nErrorModel.prototype.trackError = function(ex, trace) {                                                               // 29\n  var key = trace.type + ':' + ex.message;                                                                            // 30\n  if(this.errors[key]) {                                                                                              // 31\n    this.errors[key].count++;                                                                                         // 32\n  } else if (this.errorCount() < this.maxErrors) {                                                                    // 33\n    var errorDef = this._formatError(ex, trace);                                                                      // 34\n    if(this.applyFilters(errorDef.type, errorDef.name, ex, errorDef.subType)) {                                       // 35\n      this.errors[key] = this._formatError(ex, trace);                                                                // 36\n    }                                                                                                                 // 37\n  }                                                                                                                   // 38\n};                                                                                                                    // 39\n                                                                                                                      // 40\nErrorModel.prototype._formatError = function(ex, trace) {                                                             // 41\n  var time = Date.now();                                                                                              // 42\n  var stack = ex.stack;                                                                                               // 43\n                                                                                                                      // 44\n  // to get Meteor's Error details                                                                                    // 45\n  if(ex.details) {                                                                                                    // 46\n    stack = \"Details: \" + ex.details + \"\\r\\n\" + stack;                                                                // 47\n  }                                                                                                                   // 48\n                                                                                                                      // 49\n  // Update trace's error event with the next stack                                                                   // 50\n  var errorEvent = trace.events && trace.events[trace.events.length -1];                                              // 51\n  var errorObject = errorEvent && errorEvent[2] && errorEvent[2].error;                                               // 52\n                                                                                                                      // 53\n  if(errorObject) {                                                                                                   // 54\n    errorObject.stack = stack;                                                                                        // 55\n  }                                                                                                                   // 56\n                                                                                                                      // 57\n  return {                                                                                                            // 58\n    appId: this.appId,                                                                                                // 59\n    name: ex.message,                                                                                                 // 60\n    type: trace.type,                                                                                                 // 61\n    startTime: time,                                                                                                  // 62\n    subType: trace.subType || trace.name,                                                                             // 63\n    trace: trace,                                                                                                     // 64\n    stacks: [{stack: stack}],                                                                                         // 65\n    count: 1,                                                                                                         // 66\n  }                                                                                                                   // 67\n};                                                                                                                    // 68\n                                                                                                                      // 69\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/kadira.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar request = Npm.require('request');                                                                                 // 1\nvar hostname = Npm.require('os').hostname();                                                                          // 2\nvar logger = Npm.require('debug')('kadira:apm');                                                                      // 3\nvar Fibers = Npm.require('fibers');                                                                                   // 4\n                                                                                                                      // 5\nKadira.models = {};                                                                                                   // 6\nKadira.options = {};                                                                                                  // 7\nKadira.env = {                                                                                                        // 8\n  currentSub: null, // keep current subscription inside ddp                                                           // 9\n  kadiraInfo: new Meteor.EnvironmentVariable(),                                                                       // 10\n};                                                                                                                    // 11\nKadira.waitTimeBuilder = new WaitTimeBuilder();                                                                       // 12\nKadira.errors = [];                                                                                                   // 13\nKadira.errors.addFilter = Kadira.errors.push.bind(Kadira.errors);                                                     // 14\n                                                                                                                      // 15\nKadira.models.methods = new MethodsModel();                                                                           // 16\nKadira.models.pubsub = new PubsubModel();                                                                             // 17\nKadira.models.system = new SystemModel();                                                                             // 18\n                                                                                                                      // 19\nKadira.connect = function(appId, appSecret, options) {                                                                // 20\n  options = options || {};                                                                                            // 21\n  options.appId = appId;                                                                                              // 22\n  options.appSecret = appSecret;                                                                                      // 23\n  options.payloadTimeout = options.payloadTimeout || 1000 * 20;                                                       // 24\n  options.endpoint = options.endpoint || \"https://enginex.kadira.io\";                                                 // 25\n  options.clientEngineSyncDelay = options.clientEngineSyncDelay || 10000;                                             // 26\n  options.thresholds = options.thresholds || {};                                                                      // 27\n  options.isHostNameSet = !!options.hostname;                                                                         // 28\n  options.hostname = options.hostname || hostname;                                                                    // 29\n  options.proxy = options.proxy || null;                                                                              // 30\n                                                                                                                      // 31\n  // remove trailing slash from endpoint url (if any)                                                                 // 32\n  if(_.last(options.endpoint) === '/') {                                                                              // 33\n    options.endpoint = options.endpoint.substr(0, options.endpoint.length - 1);                                       // 34\n  }                                                                                                                   // 35\n                                                                                                                      // 36\n  // error tracking is enabled by default                                                                             // 37\n  if(options.enableErrorTracking === undefined) {                                                                     // 38\n    options.enableErrorTracking = true;                                                                               // 39\n  }                                                                                                                   // 40\n                                                                                                                      // 41\n  Kadira.options = options;                                                                                           // 42\n  Kadira.options.authHeaders = {                                                                                      // 43\n    'KADIRA-APP-ID': Kadira.options.appId,                                                                            // 44\n    'KADIRA-APP-SECRET': Kadira.options.appSecret                                                                     // 45\n  };                                                                                                                  // 46\n                                                                                                                      // 47\n  Kadira.syncedDate = new Ntp(options.endpoint);                                                                      // 48\n  Kadira.syncedDate.sync();                                                                                           // 49\n  Kadira.models.error = new ErrorModel(appId);                                                                        // 50\n                                                                                                                      // 51\n  // handle pre-added filters                                                                                         // 52\n  var addFilterFn = Kadira.models.error.addFilter.bind(Kadira.models.error);                                          // 53\n  Kadira.errors.forEach(addFilterFn);                                                                                 // 54\n  Kadira.errors = Kadira.models.error;                                                                                // 55\n                                                                                                                      // 56\n  // setting runtime info, which will be sent to kadira                                                               // 57\n  __meteor_runtime_config__.kadira = {                                                                                // 58\n    appId: appId,                                                                                                     // 59\n    endpoint: options.endpoint,                                                                                       // 60\n    clientEngineSyncDelay: options.clientEngineSyncDelay,                                                             // 61\n  };                                                                                                                  // 62\n                                                                                                                      // 63\n  // send hostname to client only is users sets a custom hostname                                                     // 64\n  if(options.isHostNameSet) {                                                                                         // 65\n    __meteor_runtime_config__.kadira.hostname = options.hostname;                                                     // 66\n  }                                                                                                                   // 67\n                                                                                                                      // 68\n  if(options.enableErrorTracking) {                                                                                   // 69\n    Kadira.enableErrorTracking();                                                                                     // 70\n  } else {                                                                                                            // 71\n    Kadira.disableErrorTracking();                                                                                    // 72\n  }                                                                                                                   // 73\n                                                                                                                      // 74\n  if(appId && appSecret) {                                                                                            // 75\n    options.appId = options.appId.trim();                                                                             // 76\n    options.appSecret = options.appSecret.trim();                                                                     // 77\n    Kadira._pingToCheckAuth(function(){                                                                               // 78\n      // it takes time to calculate version 'sha' values                                                              // 79\n      // it'll be ready when Meteor.startup is called                                                                 // 80\n      Meteor.startup(Kadira._sendAppStats);                                                                           // 81\n      Kadira._schedulePayloadSend();                                                                                  // 82\n    });                                                                                                               // 83\n    logger('connected to app: ', appId);                                                                              // 84\n  } else {                                                                                                            // 85\n    throw new Error('Kadira: required appId and appSecret');                                                          // 86\n  }                                                                                                                   // 87\n                                                                                                                      // 88\n  // start tracking errors                                                                                            // 89\n  Meteor.startup(function () {                                                                                        // 90\n    TrackUncaughtExceptions();                                                                                        // 91\n    TrackMeteorDebug();                                                                                               // 92\n  })                                                                                                                  // 93\n                                                                                                                      // 94\n  //start wrapping Meteor's internal methods                                                                          // 95\n  Kadira._startInstrumenting(function() {                                                                             // 96\n    console.log('Kadira: completed instrumenting the app')                                                            // 97\n    Kadira.connected = true;                                                                                          // 98\n  });                                                                                                                 // 99\n                                                                                                                      // 100\n  Meteor.publish(null, function () {                                                                                  // 101\n    var options = __meteor_runtime_config__.kadira;                                                                   // 102\n    this.added('kadira_settings', Random.id(), options);                                                              // 103\n    this.ready();                                                                                                     // 104\n  });                                                                                                                 // 105\n};                                                                                                                    // 106\n                                                                                                                      // 107\n//track how many times we've sent the data (once per minute)                                                          // 108\nKadira._buildPayload = function () {                                                                                  // 109\n  var payload = {host: Kadira.options.hostname};                                                                      // 110\n  var buildDetailedInfo = Kadira._isDetailedInfo();                                                                   // 111\n  _.extend(payload, Kadira.models.methods.buildPayload(buildDetailedInfo));                                           // 112\n  _.extend(payload, Kadira.models.pubsub.buildPayload(buildDetailedInfo));                                            // 113\n  _.extend(payload, Kadira.models.system.buildPayload());                                                             // 114\n  if(Kadira.options.enableErrorTracking) {                                                                            // 115\n    _.extend(payload, Kadira.models.error.buildPayload());                                                            // 116\n  }                                                                                                                   // 117\n                                                                                                                      // 118\n  return payload;                                                                                                     // 119\n}                                                                                                                     // 120\n                                                                                                                      // 121\nKadira._countDataSent = 0;                                                                                            // 122\nKadira._detailInfoSentInterval = Math.ceil((1000*60) / Kadira.options.payloadTimeout);                                // 123\nKadira._isDetailedInfo = function () {                                                                                // 124\n  return (Kadira._countDataSent++ % Kadira._detailInfoSentInterval) == 0;                                             // 125\n}                                                                                                                     // 126\n                                                                                                                      // 127\nKadira.authCheckFailures = 0;                                                                                         // 128\nKadira._pingToCheckAuth = function (callback) {                                                                       // 129\n  var authHeaders = _.clone(Kadira.options.authHeaders);                                                              // 130\n  var httpOptions = {headers: authHeaders, data: {}};                                                                 // 131\n  var endpoint = Kadira.options.endpoint + '/ping';                                                                   // 132\n  var authRetry = new Retry({                                                                                         // 133\n    minCount: 0, // don't do any immediate retries                                                                    // 134\n    baseTimeout: 5 * 1000                                                                                             // 135\n  });                                                                                                                 // 136\n                                                                                                                      // 137\n  Kadira._postData(endpoint, httpOptions, function(err, response){                                                    // 138\n    if(response) {                                                                                                    // 139\n      if(response.statusCode == 200) {                                                                                // 140\n        console.log('Kadira: successfully authenticated');                                                            // 141\n        authRetry.clear();                                                                                            // 142\n        callback();                                                                                                   // 143\n      } else if(response.statusCode == 401) {                                                                         // 144\n        console.log('Kadira: authentication failed - check your appId & appSecret')                                   // 145\n      } else {                                                                                                        // 146\n        retryPingToCheckAuth({message: \"unidentified error code: \" + response.statusCode});                           // 147\n      }                                                                                                               // 148\n    } else {                                                                                                          // 149\n      retryPingToCheckAuth(err);                                                                                      // 150\n    }                                                                                                                 // 151\n  });                                                                                                                 // 152\n                                                                                                                      // 153\n  function retryPingToCheckAuth(err){                                                                                 // 154\n    console.log('Kadira: retrying to authenticate (error: %s)', err.message);                                         // 155\n    authRetry.retryLater(Kadira.authCheckFailures, function(){                                                        // 156\n      Kadira._pingToCheckAuth(callback);                                                                              // 157\n    });                                                                                                               // 158\n  }                                                                                                                   // 159\n}                                                                                                                     // 160\n                                                                                                                      // 161\nKadira._sendAppStats = function () {                                                                                  // 162\n  var appStats = {};                                                                                                  // 163\n  appStats.release = Meteor.release;                                                                                  // 164\n  appStats.protocolVersion = '1.0.0';                                                                                 // 165\n  appStats.packageVersions = [];                                                                                      // 166\n  appStats.appVersions = {                                                                                            // 167\n    webapp: __meteor_runtime_config__['autoupdateVersion'],                                                           // 168\n    refreshable: __meteor_runtime_config__['autoupdateVersionRefreshable'],                                           // 169\n    cordova: __meteor_runtime_config__['autoupdateVersionCordova']                                                    // 170\n  }                                                                                                                   // 171\n                                                                                                                      // 172\n  // TODO get version number for installed packages                                                                   // 173\n  _.each(Package, function (v, name) {                                                                                // 174\n    appStats.packageVersions.push({name: name, version: null});                                                       // 175\n  });                                                                                                                 // 176\n                                                                                                                      // 177\n  Kadira._send({                                                                                                      // 178\n    host: Kadira.options.hostname,                                                                                    // 179\n    startTime: new Date(),                                                                                            // 180\n    appStats: appStats                                                                                                // 181\n  });                                                                                                                 // 182\n}                                                                                                                     // 183\n                                                                                                                      // 184\nKadira._schedulePayloadSend = function () {                                                                           // 185\n  setTimeout(function () {                                                                                            // 186\n    Kadira._sendPayload(Kadira._schedulePayloadSend);                                                                 // 187\n  }, Kadira.options.payloadTimeout);                                                                                  // 188\n}                                                                                                                     // 189\n                                                                                                                      // 190\nKadira._sendPayload = function (callback) {                                                                           // 191\n  new Fibers(function() {                                                                                             // 192\n    var payload = Kadira._buildPayload();                                                                             // 193\n    Kadira._send(payload, function (err) {                                                                            // 194\n      if(err) {                                                                                                       // 195\n        console.log('Kadira: Error sending payload (dropped after 5 tries)', err.message);                            // 196\n      }                                                                                                               // 197\n                                                                                                                      // 198\n      callback && callback();                                                                                         // 199\n    });                                                                                                               // 200\n  }).run();                                                                                                           // 201\n}                                                                                                                     // 202\n                                                                                                                      // 203\nKadira._send = function (payload, callback) {                                                                         // 204\n  var endpoint = Kadira.options.endpoint;                                                                             // 205\n  var authHeaders = _.clone(Kadira.options.authHeaders);                                                              // 206\n  var httpOptions = {headers: authHeaders, data: payload};                                                            // 207\n  var payloadRetries = 0;                                                                                             // 208\n  var payloadRetry = new Retry({                                                                                      // 209\n    minCount: 0, // don't do any immediate payloadRetries                                                             // 210\n    baseTimeout: 5*1000,                                                                                              // 211\n    maxTimeout: 60000                                                                                                 // 212\n  });                                                                                                                 // 213\n                                                                                                                      // 214\n  callHTTP();                                                                                                         // 215\n                                                                                                                      // 216\n  function callHTTP() {                                                                                               // 217\n    Kadira._postData(endpoint, httpOptions, function(err, response){                                                  // 218\n      if(!(response && response.statusCode)) {                                                                        // 219\n        err = err || new Error(\"Kadira: Unknown Error\");                                                              // 220\n        return tryAgain(err);                                                                                         // 221\n      }                                                                                                               // 222\n                                                                                                                      // 223\n      var status = response.statusCode;                                                                               // 224\n                                                                                                                      // 225\n      if(status === 200) {                                                                                            // 226\n        if(payloadRetries > 0) {                                                                                      // 227\n          logger('connected again and payload sent.')                                                                 // 228\n        }                                                                                                             // 229\n                                                                                                                      // 230\n        cleaPayloadRetry();                                                                                           // 231\n        return callback && callback();                                                                                // 232\n      }                                                                                                               // 233\n                                                                                                                      // 234\n      // do not retry if authentication fails                                                                         // 235\n      if(status === 401) {                                                                                            // 236\n        throw new Error('Kadira: AppId, AppSecret combination is invalid');                                           // 237\n      }                                                                                                               // 238\n                                                                                                                      // 239\n      if(status < 400 || status > 600) {                                                                              // 240\n        err = err || new Error(\"Kadira: error: \" + status);                                                           // 241\n        return tryAgain(err);                                                                                         // 242\n      }                                                                                                               // 243\n                                                                                                                      // 244\n      if(status >= 500 && status < 600) {                                                                             // 245\n        if(!err) {                                                                                                    // 246\n          err = new Error(\"Kadira: server error: \" + status);                                                         // 247\n        }                                                                                                             // 248\n                                                                                                                      // 249\n        return tryAgain(err);                                                                                         // 250\n      }                                                                                                               // 251\n                                                                                                                      // 252\n      // do not retry for kadira agent errors                                                                         // 253\n      if(status >= 400 && status < 500) {                                                                             // 254\n        console.log('Kadira: agent error:', status);                                                                  // 255\n      }                                                                                                               // 256\n                                                                                                                      // 257\n      cleaPayloadRetry();                                                                                             // 258\n      callback && callback();                                                                                         // 259\n    });                                                                                                               // 260\n  }                                                                                                                   // 261\n                                                                                                                      // 262\n  function tryAgain(err) {                                                                                            // 263\n    err = err || {};                                                                                                  // 264\n    logger('retrying to send payload to server')                                                                      // 265\n    if(++payloadRetries < 5) {                                                                                        // 266\n      payloadRetry.retryLater(payloadRetries, callHTTP);                                                              // 267\n    } else {                                                                                                          // 268\n      cleaPayloadRetry();                                                                                             // 269\n      callback && callback(err);                                                                                      // 270\n    }                                                                                                                 // 271\n  }                                                                                                                   // 272\n                                                                                                                      // 273\n  function cleaPayloadRetry() {                                                                                       // 274\n    payloadRetries = 0;                                                                                               // 275\n    payloadRetry.clear();                                                                                             // 276\n  }                                                                                                                   // 277\n}                                                                                                                     // 278\n                                                                                                                      // 279\n// this return the __kadiraInfo from the current Fiber by default                                                     // 280\n// if called with 2nd argument as true, it will get the kadira info from                                              // 281\n// Meteor.EnvironmentVariable                                                                                         // 282\n//                                                                                                                    // 283\n// WARNNING: returned info object is the reference object.                                                            // 284\n//  Changing it might cause issues when building traces. So use with care                                             // 285\nKadira._getInfo = function(currentFiber, useEnvironmentVariable) {                                                    // 286\n  currentFiber = currentFiber || Fibers.current;                                                                      // 287\n  if(currentFiber) {                                                                                                  // 288\n    if(useEnvironmentVariable) {                                                                                      // 289\n      return Kadira.env.kadiraInfo.get();                                                                             // 290\n    }                                                                                                                 // 291\n    return currentFiber.__kadiraInfo;                                                                                 // 292\n  }                                                                                                                   // 293\n};                                                                                                                    // 294\n                                                                                                                      // 295\n// this does not clone the info object. So, use with care                                                             // 296\nKadira._setInfo = function(info) {                                                                                    // 297\n  Fibers.current.__kadiraInfo = info;                                                                                 // 298\n};                                                                                                                    // 299\n                                                                                                                      // 300\nKadira.enableErrorTracking = function () {                                                                            // 301\n  __meteor_runtime_config__.kadira.enableErrorTracking = true;                                                        // 302\n  Kadira.options.enableErrorTracking = true;                                                                          // 303\n};                                                                                                                    // 304\n                                                                                                                      // 305\nKadira.disableErrorTracking = function () {                                                                           // 306\n  __meteor_runtime_config__.kadira.enableErrorTracking = false;                                                       // 307\n  Kadira.options.enableErrorTracking = false;                                                                         // 308\n};                                                                                                                    // 309\n                                                                                                                      // 310\nKadira.trackError = function (type, message, options) {                                                               // 311\n  if(Kadira.options.enableErrorTracking && type && message) {                                                         // 312\n    options = options || {};                                                                                          // 313\n    options.subType = options.subType || 'server';                                                                    // 314\n    options.stacks = options.stacks || '';                                                                            // 315\n    var error = {message: message, stack: options.stacks};                                                            // 316\n    var trace = {                                                                                                     // 317\n      type: type,                                                                                                     // 318\n      subType: options.subType,                                                                                       // 319\n      name: message,                                                                                                  // 320\n      errored: true,                                                                                                  // 321\n      at: Kadira.syncedDate.getTime(),                                                                                // 322\n      events: [['start', 0, {}], ['error', 0, {error: error}]],                                                       // 323\n      metrics: {total: 0}                                                                                             // 324\n    };                                                                                                                // 325\n    Kadira.models.error.trackError(error, trace);                                                                     // 326\n  }                                                                                                                   // 327\n}                                                                                                                     // 328\n                                                                                                                      // 329\nKadira.ignoreErrorTracking = function (err) {                                                                         // 330\n  err._skipKadira = true;                                                                                             // 331\n}                                                                                                                     // 332\n                                                                                                                      // 333\nKadira._postData = function (endpoint, options, callback) {                                                           // 334\n  var content = JSON.stringify(options.data);                                                                         // 335\n                                                                                                                      // 336\n  var headers = options.headers;                                                                                      // 337\n  headers['Content-Type'] = 'application/json';                                                                       // 338\n                                                                                                                      // 339\n  var options = {                                                                                                     // 340\n    url: endpoint,                                                                                                    // 341\n    method: 'POST',                                                                                                   // 342\n    encoding: 'utf8',                                                                                                 // 343\n    body: content,                                                                                                    // 344\n    headers: headers                                                                                                  // 345\n  };                                                                                                                  // 346\n                                                                                                                      // 347\n  if(Kadira.options.proxy) {                                                                                          // 348\n    options.proxy = Kadira.options.proxy;                                                                             // 349\n  }                                                                                                                   // 350\n                                                                                                                      // 351\n  request(options, function (error, res, body) {                                                                      // 352\n    if(error) {                                                                                                       // 353\n      console.log('Kadira:', error.message);                                                                          // 354\n      return callback(error);                                                                                         // 355\n    }                                                                                                                 // 356\n                                                                                                                      // 357\n    var response = {};                                                                                                // 358\n    response.statusCode = res.statusCode;                                                                             // 359\n    callback(null, response);                                                                                         // 360\n  });                                                                                                                 // 361\n}                                                                                                                     // 362\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/hijack/wrap_server.js                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar Fiber = Npm.require('fibers');                                                                                    // 1\n                                                                                                                      // 2\nwrapServer = function(serverProto) {                                                                                  // 3\n  var originalHandleConnect = serverProto._handleConnect                                                              // 4\n  serverProto._handleConnect = function(socket, msg) {                                                                // 5\n    originalHandleConnect.call(this, socket, msg);                                                                    // 6\n    var session = socket._meteorSession;                                                                              // 7\n    // sometimes it is possible for _meteorSession to be undefined                                                    // 8\n    // one such reason would be if DDP versions are not matching                                                      // 9\n    // if then, we should not process it                                                                              // 10\n    if(!session) {                                                                                                    // 11\n      return;                                                                                                         // 12\n    }                                                                                                                 // 13\n                                                                                                                      // 14\n    Kadira.EventBus.emit('system', 'createSession', msg, socket._meteorSession);                                      // 15\n                                                                                                                      // 16\n    if(Kadira.connected) {                                                                                            // 17\n      Kadira.models.system.handleSessionActivity(msg, socket._meteorSession);                                         // 18\n    }                                                                                                                 // 19\n  };                                                                                                                  // 20\n};                                                                                                                    // 21\n                                                                                                                      // 22\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/hijack/wrap_session.js                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nwrapSession = function(sessionProto) {                                                                                // 1\n  var originalProcessMessage = sessionProto.processMessage;                                                           // 2\n  sessionProto.processMessage = function(msg) {                                                                       // 3\n    if(true) {                                                                                                        // 4\n      var kadiraInfo = {                                                                                              // 5\n        session: this.id,                                                                                             // 6\n        userId: this.userId                                                                                           // 7\n      };                                                                                                              // 8\n                                                                                                                      // 9\n      if(msg.msg == 'method' || msg.msg == 'sub') {                                                                   // 10\n        kadiraInfo.trace = Kadira.tracer.start(this, msg);                                                            // 11\n        Kadira.waitTimeBuilder.register(this, msg.id);                                                                // 12\n                                                                                                                      // 13\n        //use JSON stringify to save the CPU                                                                          // 14\n        var startData = { userId: this.userId, params: JSON.stringify(msg.params) };                                  // 15\n        Kadira.tracer.event(kadiraInfo.trace, 'start', startData);                                                    // 16\n        var waitEventId = Kadira.tracer.event(kadiraInfo.trace, 'wait', {}, kadiraInfo);                              // 17\n        msg._waitEventId = waitEventId;                                                                               // 18\n        msg.__kadiraInfo = kadiraInfo;                                                                                // 19\n                                                                                                                      // 20\n        if(msg.msg == 'sub') {                                                                                        // 21\n          // start tracking inside processMessage allows us to indicate                                               // 22\n          // wait time as well                                                                                        // 23\n          Kadira.EventBus.emit('pubsub', 'subReceived', this, msg);                                                   // 24\n          Kadira.models.pubsub._trackSub(this, msg);                                                                  // 25\n        }                                                                                                             // 26\n      }                                                                                                               // 27\n                                                                                                                      // 28\n      // Update session last active time                                                                              // 29\n      Kadira.EventBus.emit('system', 'ddpMessageReceived', this, msg);                                                // 30\n      Kadira.models.system.handleSessionActivity(msg, this);                                                          // 31\n    }                                                                                                                 // 32\n                                                                                                                      // 33\n    return originalProcessMessage.call(this, msg);                                                                    // 34\n  };                                                                                                                  // 35\n                                                                                                                      // 36\n  //adding the method context to the current fiber                                                                    // 37\n  var originalMethodHandler = sessionProto.protocol_handlers.method;                                                  // 38\n  sessionProto.protocol_handlers.method = function(msg, unblock) {                                                    // 39\n    var self = this;                                                                                                  // 40\n    //add context                                                                                                     // 41\n    var kadiraInfo = msg.__kadiraInfo;                                                                                // 42\n    if(kadiraInfo) {                                                                                                  // 43\n      Kadira._setInfo(kadiraInfo);                                                                                    // 44\n                                                                                                                      // 45\n      // end wait event                                                                                               // 46\n      var waitList = Kadira.waitTimeBuilder.build(this, msg.id);                                                      // 47\n      Kadira.tracer.eventEnd(kadiraInfo.trace, msg._waitEventId, {waitOn: waitList});                                 // 48\n                                                                                                                      // 49\n      unblock = Kadira.waitTimeBuilder.trackWaitTime(this, msg, unblock);                                             // 50\n      var response = Kadira.env.kadiraInfo.withValue(kadiraInfo, function () {                                        // 51\n        return originalMethodHandler.call(self, msg, unblock);                                                        // 52\n      });                                                                                                             // 53\n      unblock();                                                                                                      // 54\n    } else {                                                                                                          // 55\n      var response = originalMethodHandler.call(self, msg, unblock);                                                  // 56\n    }                                                                                                                 // 57\n                                                                                                                      // 58\n    return response;                                                                                                  // 59\n  };                                                                                                                  // 60\n                                                                                                                      // 61\n  //to capture the currently processing message                                                                       // 62\n  var orginalSubHandler = sessionProto.protocol_handlers.sub;                                                         // 63\n  sessionProto.protocol_handlers.sub = function(msg, unblock) {                                                       // 64\n    var self = this;                                                                                                  // 65\n    //add context                                                                                                     // 66\n    var kadiraInfo = msg.__kadiraInfo;                                                                                // 67\n    if(kadiraInfo) {                                                                                                  // 68\n      Kadira._setInfo(kadiraInfo);                                                                                    // 69\n                                                                                                                      // 70\n      // end wait event                                                                                               // 71\n      var waitList = Kadira.waitTimeBuilder.build(this, msg.id);                                                      // 72\n      Kadira.tracer.eventEnd(kadiraInfo.trace, msg._waitEventId, {waitOn: waitList});                                 // 73\n                                                                                                                      // 74\n      unblock = Kadira.waitTimeBuilder.trackWaitTime(this, msg, unblock);                                             // 75\n      var response = Kadira.env.kadiraInfo.withValue(kadiraInfo, function () {                                        // 76\n        return orginalSubHandler.call(self, msg, unblock);                                                            // 77\n      });                                                                                                             // 78\n      unblock();                                                                                                      // 79\n    } else {                                                                                                          // 80\n      var response = orginalSubHandler.call(self, msg, unblock);                                                      // 81\n    }                                                                                                                 // 82\n                                                                                                                      // 83\n    return response;                                                                                                  // 84\n  };                                                                                                                  // 85\n                                                                                                                      // 86\n  //to capture the currently processing message                                                                       // 87\n  var orginalUnSubHandler = sessionProto.protocol_handlers.unsub;                                                     // 88\n  sessionProto.protocol_handlers.unsub = function(msg, unblock) {                                                     // 89\n    unblock = Kadira.waitTimeBuilder.trackWaitTime(this, msg, unblock);                                               // 90\n    var response = orginalUnSubHandler.call(this, msg, unblock);                                                      // 91\n    unblock();                                                                                                        // 92\n    return response;                                                                                                  // 93\n  };                                                                                                                  // 94\n                                                                                                                      // 95\n  //track method ending (to get the result of error)                                                                  // 96\n  var originalSend = sessionProto.send;                                                                               // 97\n  sessionProto.send = function(msg) {                                                                                 // 98\n    if(msg.msg == 'result') {                                                                                         // 99\n      var kadiraInfo = Kadira._getInfo();                                                                             // 100\n      if(kadiraInfo) {                                                                                                // 101\n        if(msg.error) {                                                                                               // 102\n          var error = _.pick(msg.error, ['message', 'stack']);                                                        // 103\n                                                                                                                      // 104\n          // pick the error from the wrapped method handler                                                           // 105\n          if(kadiraInfo && kadiraInfo.currentError) {                                                                 // 106\n            // the error stack is wrapped so Meteor._debug can identify                                               // 107\n            // this as a method error.                                                                                // 108\n            error = _.pick(kadiraInfo.currentError, ['message', 'stack']);                                            // 109\n            // see wrapMethodHanderForErrors() method def for more info                                               // 110\n            if(error.stack && error.stack.stack) {                                                                    // 111\n              error.stack = error.stack.stack;                                                                        // 112\n            }                                                                                                         // 113\n          }                                                                                                           // 114\n                                                                                                                      // 115\n          Kadira.tracer.endLastEvent(kadiraInfo.trace);                                                               // 116\n          Kadira.tracer.event(kadiraInfo.trace, 'error', {error: error});                                             // 117\n        } else {                                                                                                      // 118\n          var isForced = Kadira.tracer.endLastEvent(kadiraInfo.trace);                                                // 119\n          if (isForced) {                                                                                             // 120\n            console.warn('Kadira endevent forced complete', JSON.stringify(kadiraInfo.trace.events));                 // 121\n          };                                                                                                          // 122\n          Kadira.tracer.event(kadiraInfo.trace, 'complete');                                                          // 123\n        }                                                                                                             // 124\n                                                                                                                      // 125\n        //processing the message                                                                                      // 126\n        var trace = Kadira.tracer.buildTrace(kadiraInfo.trace);                                                       // 127\n        Kadira.EventBus.emit('method', 'methodCompleted', trace, this);                                               // 128\n        Kadira.models.methods.processMethod(trace);                                                                   // 129\n                                                                                                                      // 130\n        // error may or may not exist and error tracking can be disabled                                              // 131\n        if(error && Kadira.options.enableErrorTracking) {                                                             // 132\n          Kadira.models.error.trackError(error, trace);                                                               // 133\n        }                                                                                                             // 134\n                                                                                                                      // 135\n        //clean and make sure, fiber is clean                                                                         // 136\n        //not sure we need to do this, but a preventive measure                                                       // 137\n        Kadira._setInfo(null);                                                                                        // 138\n      }                                                                                                               // 139\n    }                                                                                                                 // 140\n                                                                                                                      // 141\n    return originalSend.call(this, msg);                                                                              // 142\n  };                                                                                                                  // 143\n};                                                                                                                    // 144\n                                                                                                                      // 145\n// wrap existing method handlers for capturing errors                                                                 // 146\n_.each(Meteor.default_server.method_handlers, function(handler, name) {                                               // 147\n  wrapMethodHanderForErrors(name, handler, Meteor.default_server.method_handlers);                                    // 148\n});                                                                                                                   // 149\n                                                                                                                      // 150\n// wrap future method handlers for capturing errors                                                                   // 151\nvar originalMeteorMethods = Meteor.methods;                                                                           // 152\nMeteor.methods = function(methodMap) {                                                                                // 153\n  _.each(methodMap, function(handler, name) {                                                                         // 154\n    wrapMethodHanderForErrors(name, handler, methodMap);                                                              // 155\n  });                                                                                                                 // 156\n  originalMeteorMethods(methodMap);                                                                                   // 157\n};                                                                                                                    // 158\n                                                                                                                      // 159\n                                                                                                                      // 160\nfunction wrapMethodHanderForErrors(name, originalHandler, methodMap) {                                                // 161\n  methodMap[name] = function() {                                                                                      // 162\n    try{                                                                                                              // 163\n      return originalHandler.apply(this, arguments);                                                                  // 164\n    } catch(ex) {                                                                                                     // 165\n      if(ex && Kadira._getInfo()) {                                                                                   // 166\n        // sometimes error may be just an string or a primitive                                                       // 167\n        // in that case, we need to make it a psuedo error                                                            // 168\n        if(typeof ex !== 'object') {                                                                                  // 169\n          ex = {message: ex, stack: ex};                                                                              // 170\n        }                                                                                                             // 171\n        // Now we are marking this error to get tracked via methods                                                   // 172\n        // But, this also triggers a Meteor.debug call and                                                            // 173\n        // it only gets the stack                                                                                     // 174\n        // We also track Meteor.debug errors and want to stop                                                         // 175\n        // tracking this error. That's why we do this                                                                 // 176\n        // See Meteor.debug error tracking code for more                                                              // 177\n        ex.stack = {stack: ex.stack, source: 'method'};                                                               // 178\n        Kadira._getInfo().currentError = ex;                                                                          // 179\n      }                                                                                                               // 180\n      throw ex;                                                                                                       // 181\n    }                                                                                                                 // 182\n  }                                                                                                                   // 183\n}                                                                                                                     // 184\n                                                                                                                      // 185\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/hijack/wrap_subscription.js                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar Fiber = Npm.require('fibers');                                                                                    // 1\n                                                                                                                      // 2\nwrapSubscription = function(subscriptionProto) {                                                                      // 3\n  // If the ready event runs outside the Fiber, Kadira._getInfo() doesn't work.                                       // 4\n  // we need some other way to store kadiraInfo so we can use it at ready hijack.                                     // 5\n  var originalRunHandler = subscriptionProto._runHandler;                                                             // 6\n  subscriptionProto._runHandler = function() {                                                                        // 7\n    var kadiraInfo = Kadira._getInfo();                                                                               // 8\n    if (kadiraInfo) {                                                                                                 // 9\n      this.__kadiraInfo = kadiraInfo;                                                                                 // 10\n    };                                                                                                                // 11\n    originalRunHandler.call(this);                                                                                    // 12\n  }                                                                                                                   // 13\n                                                                                                                      // 14\n  var originalReady = subscriptionProto.ready;                                                                        // 15\n  subscriptionProto.ready = function() {                                                                              // 16\n    // meteor has a field called `_ready` which tracks this                                                           // 17\n    // but we need to make it future proof                                                                            // 18\n    if(!this._apmReadyTracked) {                                                                                      // 19\n      var kadiraInfo = Kadira._getInfo() || this.__kadiraInfo;                                                        // 20\n      delete this.__kadiraInfo;                                                                                       // 21\n      //sometime .ready can be called in the context of the method                                                    // 22\n      //then we have some problems, that's why we are checking this                                                   // 23\n      //eg:- Accounts.createUser                                                                                      // 24\n      if(kadiraInfo && this._subscriptionId == kadiraInfo.trace.id) {                                                 // 25\n        var isForced = Kadira.tracer.endLastEvent(kadiraInfo.trace);                                                  // 26\n        if (isForced) {                                                                                               // 27\n          console.warn('Kadira endevent forced complete', JSON.stringify(kadiraInfo.trace.events));                   // 28\n        };                                                                                                            // 29\n        Kadira.tracer.event(kadiraInfo.trace, 'complete');                                                            // 30\n        var trace = Kadira.tracer.buildTrace(kadiraInfo.trace);                                                       // 31\n      }                                                                                                               // 32\n                                                                                                                      // 33\n      Kadira.EventBus.emit('pubsub', 'subCompleted', trace, this._session, this);                                     // 34\n      Kadira.models.pubsub._trackReady(this._session, this, trace);                                                   // 35\n      this._apmReadyTracked = true;                                                                                   // 36\n    }                                                                                                                 // 37\n                                                                                                                      // 38\n    // we still pass the control to the original implementation                                                       // 39\n    // since multiple ready calls are handled by itself                                                               // 40\n    originalReady.call(this);                                                                                         // 41\n  };                                                                                                                  // 42\n                                                                                                                      // 43\n  var originalError = subscriptionProto.error;                                                                        // 44\n  subscriptionProto.error = function(err) {                                                                           // 45\n    var kadiraInfo = Kadira._getInfo();                                                                               // 46\n                                                                                                                      // 47\n    if(kadiraInfo && this._subscriptionId == kadiraInfo.trace.id) {                                                   // 48\n      Kadira.tracer.endLastEvent(kadiraInfo.trace);                                                                   // 49\n                                                                                                                      // 50\n      var errorForApm = _.pick(err, 'message', 'stack');                                                              // 51\n      Kadira.tracer.event(kadiraInfo.trace, 'error', {error: errorForApm});                                           // 52\n      var trace = Kadira.tracer.buildTrace(kadiraInfo.trace);                                                         // 53\n                                                                                                                      // 54\n      Kadira.models.pubsub._trackError(this._session, this, trace);                                                   // 55\n                                                                                                                      // 56\n      // error tracking can be disabled and if there is a trace                                                       // 57\n      // trace should be avaialble all the time, but it won't                                                         // 58\n      // if something wrong happened on the trace building                                                            // 59\n      if(Kadira.options.enableErrorTracking && trace) {                                                               // 60\n        Kadira.models.error.trackError(err, trace);                                                                   // 61\n      }                                                                                                               // 62\n    }                                                                                                                 // 63\n                                                                                                                      // 64\n    // wrap error stack so Meteor._debug can identify and ignore it                                                   // 65\n    err.stack = {stack: err.stack, source: 'subscription'};                                                           // 66\n    originalError.call(this, err);                                                                                    // 67\n  };                                                                                                                  // 68\n                                                                                                                      // 69\n  var originalDeactivate = subscriptionProto._deactivate;                                                             // 70\n  subscriptionProto._deactivate = function() {                                                                        // 71\n    Kadira.EventBus.emit('pubsub', 'subDeactivated', this._session, this);                                            // 72\n    Kadira.models.pubsub._trackUnsub(this._session, this);                                                            // 73\n    originalDeactivate.call(this);                                                                                    // 74\n  };                                                                                                                  // 75\n                                                                                                                      // 76\n  //adding the currenSub env variable                                                                                 // 77\n  ['added', 'changed', 'removed'].forEach(function(funcName) {                                                        // 78\n    var originalFunc = subscriptionProto[funcName];                                                                   // 79\n    subscriptionProto[funcName] = function(collectionName, id, fields) {                                              // 80\n      var self = this;                                                                                                // 81\n                                                                                                                      // 82\n      //we need to run this code in a fiber and that's how we track                                                   // 83\n      //subscription info. May be we can figure out, some other way to do this                                        // 84\n      Kadira.env.currentSub = self;                                                                                   // 85\n      var res = originalFunc.call(self, collectionName, id, fields);                                                  // 86\n      Kadira.env.currentSub = null;                                                                                   // 87\n                                                                                                                      // 88\n      return res;                                                                                                     // 89\n    };                                                                                                                // 90\n  });                                                                                                                 // 91\n};                                                                                                                    // 92\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/hijack/wrap_observers.js                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nwrapOplogObserveDriver = function(proto) {                                                                            // 1\n  var originalRunQuery = proto._runQuery;                                                                             // 2\n  proto._runQuery = function() {                                                                                      // 3\n    var start = Date.now();                                                                                           // 4\n    originalRunQuery.call(this);                                                                                      // 5\n    this._lastPollTime = Date.now() - start;                                                                          // 6\n  };                                                                                                                  // 7\n                                                                                                                      // 8\n  var originalStop = proto.stop;                                                                                      // 9\n  proto.stop = function() {                                                                                           // 10\n    if(this._ownerInfo && this._ownerInfo.type === 'sub') {                                                           // 11\n      Kadira.EventBus.emit('pubsub', 'observerDeleted', this._ownerInfo);                                             // 12\n      Kadira.models.pubsub.trackDeletedObserver(this._ownerInfo);                                                     // 13\n    }                                                                                                                 // 14\n                                                                                                                      // 15\n    return originalStop.call(this);                                                                                   // 16\n  };                                                                                                                  // 17\n};                                                                                                                    // 18\n                                                                                                                      // 19\nwrapPollingObserveDriver = function(proto) {                                                                          // 20\n  var originalPollMongo = proto._pollMongo;                                                                           // 21\n  proto._pollMongo = function() {                                                                                     // 22\n    var start = Date.now();                                                                                           // 23\n    originalPollMongo.call(this);                                                                                     // 24\n    this._lastPollTime = Date.now() - start;                                                                          // 25\n  };                                                                                                                  // 26\n                                                                                                                      // 27\n  var originalStop = proto.stop;                                                                                      // 28\n  proto.stop = function() {                                                                                           // 29\n    if(this._ownerInfo && this._ownerInfo.type === 'sub') {                                                           // 30\n      Kadira.EventBus.emit('pubsub', 'observerDeleted', this._ownerInfo);                                             // 31\n      Kadira.models.pubsub.trackDeletedObserver(this._ownerInfo);                                                     // 32\n    }                                                                                                                 // 33\n                                                                                                                      // 34\n    return originalStop.call(this);                                                                                   // 35\n  };                                                                                                                  // 36\n};                                                                                                                    // 37\n                                                                                                                      // 38\nwrapMultiplexer = function(proto) {                                                                                   // 39\n  var originalInitalAdd = proto.addHandleAndSendInitialAdds;                                                          // 40\n   proto.addHandleAndSendInitialAdds = function(handle) {                                                             // 41\n    if(!this._firstInitialAddTime) {                                                                                  // 42\n      this._firstInitialAddTime = Date.now();                                                                         // 43\n    }                                                                                                                 // 44\n                                                                                                                      // 45\n    handle._wasMultiplexerReady = this._ready();                                                                      // 46\n    handle._queueLength = this._queue._taskHandles.length;                                                            // 47\n                                                                                                                      // 48\n    if(!handle._wasMultiplexerReady) {                                                                                // 49\n      handle._elapsedPollingTime = Date.now() - this._firstInitialAddTime;                                            // 50\n    }                                                                                                                 // 51\n    return originalInitalAdd.call(this, handle);                                                                      // 52\n  };                                                                                                                  // 53\n};                                                                                                                    // 54\n                                                                                                                      // 55\nwrapForCountingObservers = function() {                                                                               // 56\n  // to count observers                                                                                               // 57\n  var mongoConnectionProto = MeteorX.MongoConnection.prototype;                                                       // 58\n  var originalObserveChanges = mongoConnectionProto._observeChanges;                                                  // 59\n  mongoConnectionProto._observeChanges = function(cursorDescription, ordered, callbacks) {                            // 60\n    var ret = originalObserveChanges.call(this, cursorDescription, ordered, callbacks);                               // 61\n    // get the Kadira Info via the Meteor.EnvironmentalVariable                                                       // 62\n    var kadiraInfo = Kadira._getInfo(null, true);                                                                     // 63\n                                                                                                                      // 64\n    if(kadiraInfo && ret._multiplexer) {                                                                              // 65\n      if(!ret._multiplexer.__kadiraTracked) {                                                                         // 66\n        // new multiplexer                                                                                            // 67\n        ret._multiplexer.__kadiraTracked = true;                                                                      // 68\n        Kadira.EventBus.emit('pubsub', 'newSubHandleCreated', kadiraInfo.trace);                                      // 69\n        Kadira.models.pubsub.incrementHandleCount(kadiraInfo.trace, false);                                           // 70\n        if(kadiraInfo.trace.type == 'sub') {                                                                          // 71\n          var ownerInfo = {                                                                                           // 72\n            type: kadiraInfo.trace.type,                                                                              // 73\n            name: kadiraInfo.trace.name,                                                                              // 74\n          };                                                                                                          // 75\n                                                                                                                      // 76\n          var observerDriver = ret._multiplexer._observeDriver;                                                       // 77\n          observerDriver._ownerInfo = ownerInfo;                                                                      // 78\n          Kadira.EventBus.emit('pubsub', 'observerCreated', ownerInfo);                                               // 79\n          Kadira.models.pubsub.trackCreatedObserver(ownerInfo);                                                       // 80\n        }                                                                                                             // 81\n      } else {                                                                                                        // 82\n        Kadira.EventBus.emit('pubsub', 'cachedSubHandleCreated', kadiraInfo.trace);                                   // 83\n        Kadira.models.pubsub.incrementHandleCount(kadiraInfo.trace, true);                                            // 84\n      }                                                                                                               // 85\n    }                                                                                                                 // 86\n                                                                                                                      // 87\n    return ret;                                                                                                       // 88\n  }                                                                                                                   // 89\n};                                                                                                                    // 90\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/hijack/session.js                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar logger = Npm.require('debug')('kadira:hijack:session');                                                           // 1\n                                                                                                                      // 2\nvar instrumented = false;                                                                                             // 3\nKadira._startInstrumenting = function(callback) {                                                                     // 4\n  if(instrumented) {                                                                                                  // 5\n    callback();                                                                                                       // 6\n    return;                                                                                                           // 7\n  }                                                                                                                   // 8\n                                                                                                                      // 9\n  instrumented = true;                                                                                                // 10\n  MeteorX.onReady(function() {                                                                                        // 11\n    //instrumenting session                                                                                           // 12\n    wrapServer(MeteorX.Server.prototype);                                                                             // 13\n    wrapSession(MeteorX.Session.prototype);                                                                           // 14\n    wrapSubscription(MeteorX.Subscription.prototype);                                                                 // 15\n                                                                                                                      // 16\n    if(MeteorX.MongoOplogDriver) {                                                                                    // 17\n      wrapOplogObserveDriver(MeteorX.MongoOplogDriver.prototype);                                                     // 18\n    }                                                                                                                 // 19\n                                                                                                                      // 20\n    if(MeteorX.MongoPollingDriver) {                                                                                  // 21\n      wrapPollingObserveDriver(MeteorX.MongoPollingDriver.prototype);                                                 // 22\n    }                                                                                                                 // 23\n                                                                                                                      // 24\n    if(MeteorX.Multiplexer) {                                                                                         // 25\n      wrapMultiplexer(MeteorX.Multiplexer.prototype);                                                                 // 26\n    }                                                                                                                 // 27\n                                                                                                                      // 28\n    wrapForCountingObservers();                                                                                       // 29\n    hijackDBOps();                                                                                                    // 30\n                                                                                                                      // 31\n    setLabels();                                                                                                      // 32\n    callback();                                                                                                       // 33\n  });                                                                                                                 // 34\n};                                                                                                                    // 35\n                                                                                                                      // 36\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/hijack/db.js                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// This hijack is important to make sure, collections created before                                                  // 1\n// we hijack dbOps, even gets tracked.                                                                                // 2\n//  Meteor does not simply expose MongoConnection object to the client                                                // 3\n//  It picks methods which are necessory and make a binded object and                                                 // 4\n//  assigned to the Mongo.Collection                                                                                  // 5\n//  so, even we updated prototype, we can't track those collections                                                   // 6\n//  but, this will fix it.                                                                                            // 7\nvar originalOpen = MongoInternals.RemoteCollectionDriver.prototype.open;                                              // 8\nMongoInternals.RemoteCollectionDriver.prototype.open = function open(name) {                                          // 9\n  var self = this;                                                                                                    // 10\n  var ret = originalOpen.call(self, name);                                                                            // 11\n                                                                                                                      // 12\n  _.each(ret, function(fn, m) {                                                                                       // 13\n    // make sure, it's in the actual mongo connection object                                                          // 14\n    // meteorhacks:mongo-collection-utils package add some arbitary methods                                           // 15\n    // which does not exist in the mongo connection                                                                   // 16\n    if(self.mongo[m]) {                                                                                               // 17\n      ret[m] = function() {                                                                                           // 18\n        Array.prototype.unshift.call(arguments, name);                                                                // 19\n        return OptimizedApply(self.mongo, self.mongo[m], arguments);                                                  // 20\n      };                                                                                                              // 21\n    }                                                                                                                 // 22\n  });                                                                                                                 // 23\n                                                                                                                      // 24\n  return ret;                                                                                                         // 25\n};                                                                                                                    // 26\n                                                                                                                      // 27\nhijackDBOps = function hijackDBOps() {                                                                                // 28\n  var mongoConnectionProto = MeteorX.MongoConnection.prototype;                                                       // 29\n  //findOne is handled by find - so no need to track it                                                               // 30\n  //upsert is handles by update                                                                                       // 31\n  ['find', 'update', 'remove', 'insert', '_ensureIndex', '_dropIndex'].forEach(function(func) {                       // 32\n    var originalFunc = mongoConnectionProto[func];                                                                    // 33\n    mongoConnectionProto[func] = function(collName, selector, mod, options) {                                         // 34\n      var payload = {                                                                                                 // 35\n        coll: collName,                                                                                               // 36\n        func: func,                                                                                                   // 37\n      };                                                                                                              // 38\n                                                                                                                      // 39\n      if(func == 'insert') {                                                                                          // 40\n        //add nothing more to the payload                                                                             // 41\n      } else if(func == '_ensureIndex' || func == '_dropIndex') {                                                     // 42\n        //add index                                                                                                   // 43\n        payload.index = JSON.stringify(selector);                                                                     // 44\n      } else if(func == 'update' && options && options.upsert) {                                                      // 45\n        payload.func = 'upsert';                                                                                      // 46\n        payload.selector = JSON.stringify(selector);                                                                  // 47\n      } else {                                                                                                        // 48\n        //all the other functions have selectors                                                                      // 49\n        payload.selector = JSON.stringify(selector);                                                                  // 50\n      }                                                                                                               // 51\n                                                                                                                      // 52\n      var kadiraInfo = Kadira._getInfo();                                                                             // 53\n      if(kadiraInfo) {                                                                                                // 54\n        var eventId = Kadira.tracer.event(kadiraInfo.trace, 'db', payload);                                           // 55\n      }                                                                                                               // 56\n                                                                                                                      // 57\n      //this cause V8 to avoid any performance optimizations, but this is must to use                                 // 58\n      //otherwise, if the error adds try catch block our logs get messy and didn't work                               // 59\n      //see: issue #6                                                                                                 // 60\n      try{                                                                                                            // 61\n        var ret = originalFunc.apply(this, arguments);                                                                // 62\n        //handling functions which can be triggered with an asyncCallback                                             // 63\n        var endOptions = {};                                                                                          // 64\n                                                                                                                      // 65\n        if(HaveAsyncCallback(arguments)) {                                                                            // 66\n          endOptions.async = true;                                                                                    // 67\n        }                                                                                                             // 68\n                                                                                                                      // 69\n        if(func == 'update') {                                                                                        // 70\n          // upsert only returns an object when called `upsert` directly                                              // 71\n          // otherwise it only act an update command                                                                  // 72\n          if(options.upsert && typeof ret == 'object') {                                                              // 73\n            endOptions.updatedDocs = ret.numberAffected;                                                              // 74\n            endOptions.insertedId = ret.insertedId;                                                                   // 75\n          } else {                                                                                                    // 76\n            endOptions.updatedDocs = ret;                                                                             // 77\n          }                                                                                                           // 78\n        } else if(func == 'remove') {                                                                                 // 79\n          endOptions.removedDocs = ret;                                                                               // 80\n        }                                                                                                             // 81\n                                                                                                                      // 82\n        if(eventId) {                                                                                                 // 83\n          Kadira.tracer.eventEnd(kadiraInfo.trace, eventId, endOptions);                                              // 84\n        }                                                                                                             // 85\n      } catch(ex) {                                                                                                   // 86\n        if(eventId) {                                                                                                 // 87\n          Kadira.tracer.eventEnd(kadiraInfo.trace, eventId, {err: ex.message});                                       // 88\n        }                                                                                                             // 89\n        throw ex;                                                                                                     // 90\n      }                                                                                                               // 91\n                                                                                                                      // 92\n      return ret;                                                                                                     // 93\n    };                                                                                                                // 94\n  });                                                                                                                 // 95\n                                                                                                                      // 96\n  var cursorProto = MeteorX.MongoCursor.prototype;                                                                    // 97\n  ['forEach', 'map', 'fetch', 'count', 'observeChanges', 'observe', 'rewind'].forEach(function(type) {                // 98\n    var originalFunc = cursorProto[type];                                                                             // 99\n    cursorProto[type] = function() {                                                                                  // 100\n      var cursorDescription = this._cursorDescription;                                                                // 101\n      var payload = {                                                                                                 // 102\n        coll: cursorDescription.collectionName,                                                                       // 103\n        selector: JSON.stringify(cursorDescription.selector),                                                         // 104\n        func: type,                                                                                                   // 105\n        cursor: true                                                                                                  // 106\n      };                                                                                                              // 107\n                                                                                                                      // 108\n      if(cursorDescription.options) {                                                                                 // 109\n        var cursorOptions = _.pick(cursorDescription.options, ['fields', 'sort', 'limit']);                           // 110\n        for(var field in cursorOptions) {                                                                             // 111\n          var value = cursorOptions[field]                                                                            // 112\n          if(typeof value == 'object') {                                                                              // 113\n            value = JSON.stringify(value);                                                                            // 114\n          }                                                                                                           // 115\n          payload[field] = value;                                                                                     // 116\n        }                                                                                                             // 117\n      };                                                                                                              // 118\n                                                                                                                      // 119\n      var kadiraInfo = Kadira._getInfo();                                                                             // 120\n      if(kadiraInfo) {                                                                                                // 121\n        var eventId = Kadira.tracer.event(kadiraInfo.trace, 'db', payload);                                           // 122\n      }                                                                                                               // 123\n                                                                                                                      // 124\n      try{                                                                                                            // 125\n        var ret = originalFunc.apply(this, arguments);                                                                // 126\n                                                                                                                      // 127\n        var endData = {};                                                                                             // 128\n        if(type == 'observeChanges' || type == 'observe') {                                                           // 129\n          var observerDriver;                                                                                         // 130\n          endData.oplog = false;                                                                                      // 131\n          // get data written by the multiplexer                                                                      // 132\n          endData.wasMultiplexerReady = ret._wasMultiplexerReady;                                                     // 133\n          endData.queueLength = ret._queueLength;                                                                     // 134\n          endData.elapsedPollingTime = ret._elapsedPollingTime;                                                       // 135\n                                                                                                                      // 136\n          if(ret._multiplexer) {                                                                                      // 137\n            endData.noOfHandles = Object.keys(ret._multiplexer._handles).length;                                      // 138\n                                                                                                                      // 139\n            // older meteor versions done not have an _multiplexer value                                              // 140\n            observerDriver = ret._multiplexer._observeDriver;                                                         // 141\n            if(observerDriver) {                                                                                      // 142\n              observerDriver = ret._multiplexer._observeDriver;                                                       // 143\n              var observerDriverClass = observerDriver.constructor;                                                   // 144\n              var usesOplog = typeof observerDriverClass.cursorSupported == 'function';                               // 145\n              endData.oplog = usesOplog;                                                                              // 146\n              var size = 0;                                                                                           // 147\n              ret._multiplexer._cache.docs.forEach(function() {size++});                                              // 148\n              endData.noOfCachedDocs = size;                                                                          // 149\n                                                                                                                      // 150\n              // if multiplexerWasNotReady, we need to get the time spend for the polling                             // 151\n              if(!ret._wasMultiplexerReady) {                                                                         // 152\n                endData.initialPollingTime = observerDriver._lastPollTime;                                            // 153\n              }                                                                                                       // 154\n            }                                                                                                         // 155\n          }                                                                                                           // 156\n                                                                                                                      // 157\n          if(!endData.oplog) {                                                                                        // 158\n            // let's try to find the reason                                                                           // 159\n            var reasonInfo = Kadira.checkWhyNoOplog(cursorDescription, observerDriver);                               // 160\n            endData.noOplogCode = reasonInfo.code;                                                                    // 161\n            endData.noOplogReason = reasonInfo.reason;                                                                // 162\n            endData.noOplogSolution = reasonInfo.solution;                                                            // 163\n          }                                                                                                           // 164\n        } else if(type == 'fetch' || type == 'map'){                                                                  // 165\n          //for other cursor operation                                                                                // 166\n          endData.docsFetched = ret.length;                                                                           // 167\n        }                                                                                                             // 168\n                                                                                                                      // 169\n        if(eventId) {                                                                                                 // 170\n          Kadira.tracer.eventEnd(kadiraInfo.trace, eventId, endData);                                                 // 171\n        }                                                                                                             // 172\n        return ret;                                                                                                   // 173\n      } catch(ex) {                                                                                                   // 174\n        if(eventId) {                                                                                                 // 175\n          Kadira.tracer.eventEnd(kadiraInfo.trace, eventId, {err: ex.message});                                       // 176\n        }                                                                                                             // 177\n        throw ex;                                                                                                     // 178\n      }                                                                                                               // 179\n    };                                                                                                                // 180\n  });                                                                                                                 // 181\n};                                                                                                                    // 182\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/hijack/http.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar originalCall = HTTP.call;                                                                                         // 1\n                                                                                                                      // 2\nHTTP.call = function(method, url) {                                                                                   // 3\n  var kadiraInfo = Kadira._getInfo();                                                                                 // 4\n  if(kadiraInfo) {                                                                                                    // 5\n    var eventId = Kadira.tracer.event(kadiraInfo.trace, 'http', {method: method, url: url});                          // 6\n  }                                                                                                                   // 7\n                                                                                                                      // 8\n  try {                                                                                                               // 9\n    var response = originalCall.apply(this, arguments);                                                               // 10\n                                                                                                                      // 11\n    //if the user supplied an asynCallback, we don't have a response object and it handled asynchronously             // 12\n    //we need to track it down to prevent issues like: #3                                                             // 13\n    var endOptions = HaveAsyncCallback(arguments)? {async: true}: {statusCode: response.statusCode};                  // 14\n    if(eventId) {                                                                                                     // 15\n      Kadira.tracer.eventEnd(kadiraInfo.trace, eventId, endOptions);                                                  // 16\n    }                                                                                                                 // 17\n    return response;                                                                                                  // 18\n  } catch(ex) {                                                                                                       // 19\n    if(eventId) {                                                                                                     // 20\n      Kadira.tracer.eventEnd(kadiraInfo.trace, eventId, {err: ex.message});                                           // 21\n    }                                                                                                                 // 22\n    throw ex;                                                                                                         // 23\n  }                                                                                                                   // 24\n};                                                                                                                    // 25\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/hijack/email.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar originalSend = Email.send;                                                                                        // 1\n                                                                                                                      // 2\nEmail.send = function(options) {                                                                                      // 3\n  var kadiraInfo = Kadira._getInfo();                                                                                 // 4\n  if(kadiraInfo) {                                                                                                    // 5\n    var data = _.pick(options, 'from', 'to', 'cc', 'bcc', 'replyTo');                                                 // 6\n    var eventId = Kadira.tracer.event(kadiraInfo.trace, 'email', data);                                               // 7\n  }                                                                                                                   // 8\n  try {                                                                                                               // 9\n    var ret = originalSend.call(this, options);                                                                       // 10\n    if(eventId) {                                                                                                     // 11\n      Kadira.tracer.eventEnd(kadiraInfo.trace, eventId);                                                              // 12\n    }                                                                                                                 // 13\n    return ret;                                                                                                       // 14\n  } catch(ex) {                                                                                                       // 15\n    if(eventId) {                                                                                                     // 16\n      Kadira.tracer.eventEnd(kadiraInfo.trace, eventId, {err: ex.message});                                           // 17\n    }                                                                                                                 // 18\n    throw ex;                                                                                                         // 19\n  }                                                                                                                   // 20\n};                                                                                                                    // 21\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/hijack/async.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar Fibers = Npm.require('fibers');                                                                                   // 1\n                                                                                                                      // 2\nvar originalYield = Fibers.yield;                                                                                     // 3\nFibers.yield = function() {                                                                                           // 4\n  var kadiraInfo = Kadira._getInfo();                                                                                 // 5\n  if(kadiraInfo) {                                                                                                    // 6\n    var eventId = Kadira.tracer.event(kadiraInfo.trace, 'async');;                                                    // 7\n    if(eventId) {                                                                                                     // 8\n      Fibers.current._apmEventId = eventId;                                                                           // 9\n    }                                                                                                                 // 10\n  }                                                                                                                   // 11\n                                                                                                                      // 12\n  return originalYield();                                                                                             // 13\n};                                                                                                                    // 14\n                                                                                                                      // 15\nvar originalRun = Fibers.prototype.run;                                                                               // 16\nFibers.prototype.run = function(val) {                                                                                // 17\n  if(this._apmEventId) {                                                                                              // 18\n    var kadiraInfo = Kadira._getInfo(this);                                                                           // 19\n    if(kadiraInfo) {                                                                                                  // 20\n      Kadira.tracer.eventEnd(kadiraInfo.trace, this._apmEventId);                                                     // 21\n      this._apmEventId = null;                                                                                        // 22\n    }                                                                                                                 // 23\n  }                                                                                                                   // 24\n  return originalRun.call(this, val);                                                                                 // 25\n};                                                                                                                    // 26\n                                                                                                                      // 27\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/hijack/error.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nTrackUncaughtExceptions = function () {                                                                               // 1\n  process.on('uncaughtException', function (err) {                                                                    // 2\n    // skip errors with `_skipKadira` flag                                                                            // 3\n    if(err._skipKadira) {                                                                                             // 4\n      return;                                                                                                         // 5\n    }                                                                                                                 // 6\n                                                                                                                      // 7\n    // let the server crash normally if error tracking is disabled                                                    // 8\n    if(!Kadira.options.enableErrorTracking) {                                                                         // 9\n      printErrorAndKill(err);                                                                                         // 10\n    }                                                                                                                 // 11\n                                                                                                                      // 12\n    // looking for already tracked errors and throw them immediately                                                  // 13\n    // throw error immediately if kadira is not ready                                                                 // 14\n    if(err._tracked || !Kadira.connected) {                                                                           // 15\n      printErrorAndKill(err);                                                                                         // 16\n    }                                                                                                                 // 17\n                                                                                                                      // 18\n    var trace = getTrace(err, 'server-crash', 'uncaughtException');                                                   // 19\n    Kadira.models.error.trackError(err, trace);                                                                       // 20\n    Kadira._sendPayload(function () {                                                                                 // 21\n      clearTimeout(timer);                                                                                            // 22\n      throwError(err);                                                                                                // 23\n    });                                                                                                               // 24\n                                                                                                                      // 25\n    var timer = setTimeout(function () {                                                                              // 26\n      throwError(err);                                                                                                // 27\n    }, 1000*10);                                                                                                      // 28\n                                                                                                                      // 29\n    function throwError(err) {                                                                                        // 30\n      // sometimes error came back from a fiber.                                                                      // 31\n      // But we don't fibers to track that error for us                                                               // 32\n      // That's why we throw the error on the nextTick                                                                // 33\n      process.nextTick(function() {                                                                                   // 34\n        // we need to mark this error where we really need to throw                                                   // 35\n        err._tracked = true;                                                                                          // 36\n        printErrorAndKill(err);                                                                                       // 37\n      });                                                                                                             // 38\n    }                                                                                                                 // 39\n  });                                                                                                                 // 40\n                                                                                                                      // 41\n  function printErrorAndKill(err) {                                                                                   // 42\n    // since we are capturing error, we are also on the error message.                                                // 43\n    // so developers think we are also reponsible for the error.                                                      // 44\n    // But we are not. This will fix that.                                                                            // 45\n    console.error(err.stack);                                                                                         // 46\n    process.exit(7);                                                                                                  // 47\n  }                                                                                                                   // 48\n}                                                                                                                     // 49\n                                                                                                                      // 50\nTrackMeteorDebug = function () {                                                                                      // 51\n  var originalMeteorDebug = Meteor._debug;                                                                            // 52\n  Meteor._debug = function (message, stack) {                                                                         // 53\n    if(!Kadira.options.enableErrorTracking) {                                                                         // 54\n      return originalMeteorDebug.call(this, message, stack);                                                          // 55\n    }                                                                                                                 // 56\n                                                                                                                      // 57\n    // We've changed `stack` into an object at method and sub handlers so we can                                      // 58\n    // ignore them here. These errors are already tracked so don't track again.                                       // 59\n    if(stack && stack.stack) {                                                                                        // 60\n      stack = stack.stack                                                                                             // 61\n    } else {                                                                                                          // 62\n      // only send to the server, if only connected to kadira                                                         // 63\n      if(Kadira.connected) {                                                                                          // 64\n        var error = new Error(message);                                                                               // 65\n        error.stack = stack;                                                                                          // 66\n        var trace = getTrace(error, 'server-internal', 'Meteor._debug');                                              // 67\n        Kadira.models.error.trackError(error, trace);                                                                 // 68\n      }                                                                                                               // 69\n    }                                                                                                                 // 70\n                                                                                                                      // 71\n    return originalMeteorDebug.apply(this, arguments);                                                                // 72\n  }                                                                                                                   // 73\n}                                                                                                                     // 74\n                                                                                                                      // 75\nfunction getTrace(err, type, subType) {                                                                               // 76\n  return {                                                                                                            // 77\n    type: type,                                                                                                       // 78\n    subType: subType,                                                                                                 // 79\n    name: err.message,                                                                                                // 80\n    errored: true,                                                                                                    // 81\n    at: Kadira.syncedDate.getTime(),                                                                                  // 82\n    events: [                                                                                                         // 83\n      ['start', 0, {}],                                                                                               // 84\n      ['error', 0, {error: {message: err.message, stack: err.stack}}]                                                 // 85\n    ],                                                                                                                // 86\n    metrics: {                                                                                                        // 87\n      total: 0                                                                                                        // 88\n    }                                                                                                                 // 89\n  };                                                                                                                  // 90\n}                                                                                                                     // 91\n                                                                                                                      // 92\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/hijack/set_labels.js                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nsetLabels = function () {                                                                                             // 1\n  // name Session.prototype.send                                                                                      // 2\n  var originalSend = MeteorX.Session.prototype.send;                                                                  // 3\n  MeteorX.Session.prototype.send = function kadira_Session_send (msg) {                                               // 4\n    return originalSend.call(this, msg);                                                                              // 5\n  }                                                                                                                   // 6\n                                                                                                                      // 7\n  // name mongodb.Connection.createDataHandler                                                                        // 8\n  var mongodb = MongoInternals.NpmModule;                                                                             // 9\n  var originalCreateDataHandler = mongodb.Connection.createDataHandler;                                               // 10\n  mongodb.Connection.createDataHandler = function (self) {                                                            // 11\n    var originalHandler = originalCreateDataHandler.call(this, self);                                                 // 12\n    return function kadira_MongoDB_dataHandler (data) {                                                               // 13\n      return originalHandler.call(this, data);                                                                        // 14\n    }                                                                                                                 // 15\n  }                                                                                                                   // 16\n                                                                                                                      // 17\n  // name Multiplexer initial adds                                                                                    // 18\n  var originalSendAdds = MeteorX.Multiplexer.prototype._sendAdds;                                                     // 19\n  MeteorX.Multiplexer.prototype._sendAdds = function kadira_Multiplexer_sendAdds (handle) {                           // 20\n    return originalSendAdds.call(this, handle);                                                                       // 21\n  }                                                                                                                   // 22\n                                                                                                                      // 23\n  // name MongoConnection insert                                                                                      // 24\n  var originalMongoInsert = MeteorX.MongoConnection.prototype._insert;                                                // 25\n  MeteorX.MongoConnection.prototype._insert = function kadira_MongoConnection_insert (coll, doc, cb) {                // 26\n    return originalMongoInsert.call(this, coll, doc, cb);                                                             // 27\n  }                                                                                                                   // 28\n                                                                                                                      // 29\n  // name MongoConnection update                                                                                      // 30\n  var originalMongoUpdate = MeteorX.MongoConnection.prototype._update;                                                // 31\n  MeteorX.MongoConnection.prototype._update = function kadira_MongoConnection_update (coll, selector, mod, options, cb) {\n    return originalMongoUpdate.call(this, coll, selector, mod, options, cb);                                          // 33\n  }                                                                                                                   // 34\n                                                                                                                      // 35\n  // name MongoConnection remove                                                                                      // 36\n  var originalMongoRemove = MeteorX.MongoConnection.prototype._remove;                                                // 37\n  MeteorX.MongoConnection.prototype._remove = function kadira_MongoConnection_remove (coll, selector, cb) {           // 38\n    return originalMongoRemove.call(this, coll, selector, cb);                                                        // 39\n  }                                                                                                                   // 40\n                                                                                                                      // 41\n  // name Pubsub added                                                                                                // 42\n  var originalPubsubAdded = MeteorX.Session.prototype.sendAdded;                                                      // 43\n  MeteorX.Session.prototype.sendAdded = function kadira_Session_sendAdded (coll, id, fields) {                        // 44\n    return originalPubsubAdded.call(this, coll, id, fields);                                                          // 45\n  }                                                                                                                   // 46\n                                                                                                                      // 47\n  // name Pubsub changed                                                                                              // 48\n  var originalPubsubChanged = MeteorX.Session.prototype.sendChanged;                                                  // 49\n  MeteorX.Session.prototype.sendChanged = function kadira_Session_sendChanged (coll, id, fields) {                    // 50\n    return originalPubsubChanged.call(this, coll, id, fields);                                                        // 51\n  }                                                                                                                   // 52\n                                                                                                                      // 53\n  // name Pubsub removed                                                                                              // 54\n  var originalPubsubRemoved = MeteorX.Session.prototype.sendRemoved;                                                  // 55\n  MeteorX.Session.prototype.sendRemoved = function kadira_Session_sendRemoved (coll, id) {                            // 56\n    return originalPubsubRemoved.call(this, coll, id);                                                                // 57\n  }                                                                                                                   // 58\n                                                                                                                      // 59\n  // name MongoCursor forEach                                                                                         // 60\n  var originalCursorForEach = MeteorX.MongoCursor.prototype.forEach;                                                  // 61\n  MeteorX.MongoCursor.prototype.forEach = function kadira_Cursor_forEach () {                                         // 62\n    return originalCursorForEach.apply(this, arguments);                                                              // 63\n  }                                                                                                                   // 64\n                                                                                                                      // 65\n  // name MongoCursor map                                                                                             // 66\n  var originalCursorMap = MeteorX.MongoCursor.prototype.map;                                                          // 67\n  MeteorX.MongoCursor.prototype.map = function kadira_Cursor_map () {                                                 // 68\n    return originalCursorMap.apply(this, arguments);                                                                  // 69\n  }                                                                                                                   // 70\n                                                                                                                      // 71\n  // name MongoCursor fetch                                                                                           // 72\n  var originalCursorFetch = MeteorX.MongoCursor.prototype.fetch;                                                      // 73\n  MeteorX.MongoCursor.prototype.fetch = function kadira_Cursor_fetch () {                                             // 74\n    return originalCursorFetch.apply(this, arguments);                                                                // 75\n  }                                                                                                                   // 76\n                                                                                                                      // 77\n  // name MongoCursor count                                                                                           // 78\n  var originalCursorCount = MeteorX.MongoCursor.prototype.count;                                                      // 79\n  MeteorX.MongoCursor.prototype.count = function kadira_Cursor_count () {                                             // 80\n    return originalCursorCount.apply(this, arguments);                                                                // 81\n  }                                                                                                                   // 82\n                                                                                                                      // 83\n  // name MongoCursor observeChanges                                                                                  // 84\n  var originalCursorObserveChanges = MeteorX.MongoCursor.prototype.observeChanges;                                    // 85\n  MeteorX.MongoCursor.prototype.observeChanges = function kadira_Cursor_observeChanges () {                           // 86\n    return originalCursorObserveChanges.apply(this, arguments);                                                       // 87\n  }                                                                                                                   // 88\n                                                                                                                      // 89\n  // name MongoCursor observe                                                                                         // 90\n  var originalCursorObserve = MeteorX.MongoCursor.prototype.observe;                                                  // 91\n  MeteorX.MongoCursor.prototype.observe = function kadira_Cursor_observe () {                                         // 92\n    return originalCursorObserve.apply(this, arguments);                                                              // 93\n  }                                                                                                                   // 94\n                                                                                                                      // 95\n  // name MongoCursor rewind                                                                                          // 96\n  var originalCursorRewind = MeteorX.MongoCursor.prototype.rewind;                                                    // 97\n  MeteorX.MongoCursor.prototype.rewind = function kadira_Cursor_rewind () {                                           // 98\n    return originalCursorRewind.apply(this, arguments);                                                               // 99\n  }                                                                                                                   // 100\n                                                                                                                      // 101\n  // name CrossBar listen                                                                                             // 102\n  var originalCrossbarListen = DDPServer._Crossbar.prototype.listen;                                                  // 103\n  DDPServer._Crossbar.prototype.listen = function kadira_Crossbar_listen (trigger, callback) {                        // 104\n    return originalCrossbarListen.call(this, trigger, callback);                                                      // 105\n  }                                                                                                                   // 106\n                                                                                                                      // 107\n  // name CrossBar fire                                                                                               // 108\n  var originalCrossbarFire = DDPServer._Crossbar.prototype.fire;                                                      // 109\n  DDPServer._Crossbar.prototype.fire = function kadira_Crossbar_fire (notification) {                                 // 110\n    return originalCrossbarFire.call(this, notification);                                                             // 111\n  }                                                                                                                   // 112\n}                                                                                                                     // 113\n                                                                                                                      // 114\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/environment_variables.js                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nKadira._parseEnv = function (env) {                                                                                   // 1\n  var options = {};                                                                                                   // 2\n  for(var name in env) {                                                                                              // 3\n    var info = Kadira._parseEnv._options[name];                                                                       // 4\n    var value = env[name];                                                                                            // 5\n    if(info && value) {                                                                                               // 6\n      options[info.name] = info.parser(value);                                                                        // 7\n    }                                                                                                                 // 8\n  }                                                                                                                   // 9\n                                                                                                                      // 10\n  return options;                                                                                                     // 11\n};                                                                                                                    // 12\n                                                                                                                      // 13\n                                                                                                                      // 14\nKadira._parseEnv.parseInt = function (str) {                                                                          // 15\n  var num = parseInt(str);                                                                                            // 16\n  if(num || num === 0) return num;                                                                                    // 17\n  throw new Error('Kadira: Match Error: \"'+num+'\" is not a number');                                                  // 18\n};                                                                                                                    // 19\n                                                                                                                      // 20\n                                                                                                                      // 21\nKadira._parseEnv.parseBool = function (str) {                                                                         // 22\n  str = str.toLowerCase();                                                                                            // 23\n  if(str === 'true') return true;                                                                                     // 24\n  if(str === 'false') return false;                                                                                   // 25\n  throw new Error('Kadira: Match Error: '+str+' is not a boolean');                                                   // 26\n};                                                                                                                    // 27\n                                                                                                                      // 28\n                                                                                                                      // 29\nKadira._parseEnv.parseUrl = function (str) {                                                                          // 30\n  return str;                                                                                                         // 31\n};                                                                                                                    // 32\n                                                                                                                      // 33\n                                                                                                                      // 34\nKadira._parseEnv.parseString = function (str) {                                                                       // 35\n  return str;                                                                                                         // 36\n};                                                                                                                    // 37\n                                                                                                                      // 38\n                                                                                                                      // 39\nKadira._parseEnv._options = {                                                                                         // 40\n  // delay to send the initial ping to the kadira engine after page loads                                             // 41\n  KADIRA_OPTIONS_CLIENT_ENGINE_SYNC_DELAY: {                                                                          // 42\n    name: 'clientEngineSyncDelay',                                                                                    // 43\n    parser: Kadira._parseEnv.parseInt,                                                                                // 44\n  },                                                                                                                  // 45\n  // time between sending errors to the engine                                                                        // 46\n  KADIRA_OPTIONS_ERROR_DUMP_INTERVAL: {                                                                               // 47\n    name: 'errorDumpInterval',                                                                                        // 48\n    parser: Kadira._parseEnv.parseInt,                                                                                // 49\n  },                                                                                                                  // 50\n  // no of errors allowed in a given interval                                                                         // 51\n  KADIRA_OPTIONS_MAX_ERRORS_PER_INTERVAL: {                                                                           // 52\n    name: 'maxErrorsPerInterval',                                                                                     // 53\n    parser: Kadira._parseEnv.parseInt,                                                                                // 54\n  },                                                                                                                  // 55\n  // a zone.js specific option to collect the full stack trace(which is not much useful)                              // 56\n  KADIRA_OPTIONS_COLLECT_ALL_STACKS: {                                                                                // 57\n    name: 'collectAllStacks',                                                                                         // 58\n    parser: Kadira._parseEnv.parseBool,                                                                               // 59\n  },                                                                                                                  // 60\n  // enable error tracking (which is turned on by default)                                                            // 61\n  KADIRA_OPTIONS_ENABLE_ERROR_TRACKING: {                                                                             // 62\n    name: 'enableErrorTracking',                                                                                      // 63\n    parser: Kadira._parseEnv.parseBool,                                                                               // 64\n  },                                                                                                                  // 65\n  // kadira engine endpoint                                                                                           // 66\n  KADIRA_OPTIONS_ENDPOINT: {                                                                                          // 67\n    name: 'endpoint',                                                                                                 // 68\n    parser: Kadira._parseEnv.parseUrl,                                                                                // 69\n  },                                                                                                                  // 70\n  // define the hostname of the current running process                                                               // 71\n  KADIRA_OPTIONS_HOSTNAME: {                                                                                          // 72\n    name: 'hostname',                                                                                                 // 73\n    parser: Kadira._parseEnv.parseString,                                                                             // 74\n  },                                                                                                                  // 75\n  // interval between sending data to the kadira engine from the server                                               // 76\n  KADIRA_OPTIONS_PAYLOAD_TIMEOUT: {                                                                                   // 77\n    name: 'payloadTimeout',                                                                                           // 78\n    parser: Kadira._parseEnv.parseInt,                                                                                // 79\n  },                                                                                                                  // 80\n  // set HTTP/HTTPS proxy                                                                                             // 81\n  KADIRA_OPTIONS_PROXY: {                                                                                             // 82\n    name: 'proxy',                                                                                                    // 83\n    parser: Kadira._parseEnv.parseUrl,                                                                                // 84\n  },                                                                                                                  // 85\n};                                                                                                                    // 86\n                                                                                                                      // 87\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/auto_connect.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nKadira._connectWithEnv = function() {                                                                                 // 1\n  if(process.env.KADIRA_APP_ID && process.env.KADIRA_APP_SECRET) {                                                    // 2\n    var options = Kadira._parseEnv(process.env);                                                                      // 3\n                                                                                                                      // 4\n    Kadira.connect(                                                                                                   // 5\n      process.env.KADIRA_APP_ID,                                                                                      // 6\n      process.env.KADIRA_APP_SECRET,                                                                                  // 7\n      options                                                                                                         // 8\n    );                                                                                                                // 9\n                                                                                                                      // 10\n    Kadira.connect = function() {                                                                                     // 11\n      throw new Error('Kadira has been already connected using credentials from Environment Variables');              // 12\n    };                                                                                                                // 13\n  }                                                                                                                   // 14\n};                                                                                                                    // 15\n                                                                                                                      // 16\n                                                                                                                      // 17\nKadira._connectWithSettings = function () {                                                                           // 18\n  if(                                                                                                                 // 19\n    Meteor.settings.kadira &&                                                                                         // 20\n    Meteor.settings.kadira.appId &&                                                                                   // 21\n    Meteor.settings.kadira.appSecret                                                                                  // 22\n  ) {                                                                                                                 // 23\n    Kadira.connect(                                                                                                   // 24\n      Meteor.settings.kadira.appId,                                                                                   // 25\n      Meteor.settings.kadira.appSecret,                                                                               // 26\n      Meteor.settings.kadira.options || {}                                                                            // 27\n    );                                                                                                                // 28\n                                                                                                                      // 29\n    Kadira.connect = function() {                                                                                     // 30\n      throw new Error('Kadira has been already connected using credentials from Meteor.settings');                    // 31\n    };                                                                                                                // 32\n  }                                                                                                                   // 33\n};                                                                                                                    // 34\n                                                                                                                      // 35\n                                                                                                                      // 36\n// Try to connect automatically                                                                                       // 37\nKadira._connectWithEnv();                                                                                             // 38\nKadira._connectWithSettings();                                                                                        // 39\n                                                                                                                      // 40\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/common/default_error_filters.js                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar commonErrRegExps = [                                                                                              // 1\n  /connection timeout\\. no (\\w*) heartbeat received/i,                                                                // 2\n  /INVALID_STATE_ERR/i,                                                                                               // 3\n];                                                                                                                    // 4\n                                                                                                                      // 5\nKadira.errorFilters = {                                                                                               // 6\n  filterValidationErrors: function(type, message, err) {                                                              // 7\n    if(err && err instanceof Meteor.Error) {                                                                          // 8\n      return false;                                                                                                   // 9\n    } else {                                                                                                          // 10\n      return true;                                                                                                    // 11\n    }                                                                                                                 // 12\n  },                                                                                                                  // 13\n                                                                                                                      // 14\n  filterCommonMeteorErrors: function(type, message) {                                                                 // 15\n    for(var lc=0; lc<commonErrRegExps.length; lc++) {                                                                 // 16\n      var regExp = commonErrRegExps[lc];                                                                              // 17\n      if(regExp.test(message)) {                                                                                      // 18\n        return false;                                                                                                 // 19\n      }                                                                                                               // 20\n    }                                                                                                                 // 21\n    return true;                                                                                                      // 22\n  }                                                                                                                   // 23\n};                                                                                                                    // 24\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/meteorhacks:kadira/lib/common/send.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nKadira.send = function (payload, path, callback) {                                                                    // 1\n  if(!Kadira.connected)  {                                                                                            // 2\n    throw new Error(\"You need to connect with Kadira first, before sending messages!\");                               // 3\n  }                                                                                                                   // 4\n                                                                                                                      // 5\n  path = (path.substr(0, 1) != '/')? \"/\" + path : path;                                                               // 6\n  var endpoint = Kadira.options.endpoint + path;                                                                      // 7\n  var retryCount = 0;                                                                                                 // 8\n  var retry = new Retry({                                                                                             // 9\n    minCount: 1,                                                                                                      // 10\n    minTimeout: 0,                                                                                                    // 11\n    baseTimeout: 1000*5,                                                                                              // 12\n    maxTimeout: 1000*60,                                                                                              // 13\n  });                                                                                                                 // 14\n                                                                                                                      // 15\n  var sendFunction = Kadira._getSendFunction();                                                                       // 16\n  tryToSend();                                                                                                        // 17\n                                                                                                                      // 18\n  function tryToSend(err) {                                                                                           // 19\n    if(retryCount < 5) {                                                                                              // 20\n      retry.retryLater(retryCount++, send);                                                                           // 21\n    } else {                                                                                                          // 22\n      console.warn('Error sending error traces to kadira server');                                                    // 23\n      if(callback) callback(err);                                                                                     // 24\n    }                                                                                                                 // 25\n  }                                                                                                                   // 26\n                                                                                                                      // 27\n  function send() {                                                                                                   // 28\n    sendFunction(endpoint, payload, function(err, content, statusCode) {                                              // 29\n      if(err) {                                                                                                       // 30\n        tryToSend(err);                                                                                               // 31\n      } else if(statusCode == 200){                                                                                   // 32\n        if(callback) callback(null, content);                                                                         // 33\n      } else {                                                                                                        // 34\n        if(callback) callback(new Meteor.Error(statusCode, content));                                                 // 35\n      }                                                                                                               // 36\n    });                                                                                                               // 37\n  }                                                                                                                   // 38\n};                                                                                                                    // 39\n                                                                                                                      // 40\nKadira._getSendFunction = function() {                                                                                // 41\n  return (Meteor.isServer)? Kadira._serverSend : Kadira._clientSend;                                                  // 42\n};                                                                                                                    // 43\n                                                                                                                      // 44\nKadira._clientSend = function (endpoint, payload, callback) {                                                         // 45\n  $.ajax({                                                                                                            // 46\n    type: 'POST',                                                                                                     // 47\n    url: endpoint,                                                                                                    // 48\n    contentType: 'application/json',                                                                                  // 49\n    data: JSON.stringify(payload),                                                                                    // 50\n    error: function(err) {                                                                                            // 51\n      callback(err);                                                                                                  // 52\n    },                                                                                                                // 53\n    success: function(data) {                                                                                         // 54\n      callback(null, data, 200);                                                                                      // 55\n    }                                                                                                                 // 56\n  });                                                                                                                 // 57\n}                                                                                                                     // 58\n                                                                                                                      // 59\nKadira._serverSend = function (endpoint, payload, callback) {                                                         // 60\n  callback = callback || function() {};                                                                               // 61\n  var Fiber = Npm.require('fibers');                                                                                  // 62\n  new Fiber(function() {                                                                                              // 63\n    var httpOptions = {                                                                                               // 64\n      data: payload,                                                                                                  // 65\n      headers: Kadira.options.authHeaders                                                                             // 66\n    };                                                                                                                // 67\n                                                                                                                      // 68\n    HTTP.call('POST', endpoint, httpOptions, function(err, res) {                                                     // 69\n      if(res) {                                                                                                       // 70\n        var content = (res.statusCode == 200)? res.data : res.content;                                                // 71\n        callback(null, content, res.statusCode);                                                                      // 72\n      } else {                                                                                                        // 73\n        callback(err);                                                                                                // 74\n      }                                                                                                               // 75\n    });                                                                                                               // 76\n  }).run();                                                                                                           // 77\n}                                                                                                                     // 78\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}