{"version":3,"sources":["meteor://ðŸ’»app/packages/peerlibrary_blocking/packages/peerlibrary_blocking.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/packages/peerlibrary_blocking.js","sourcesContent":["(function () {\n\n///////////////////////////////////////////////////////////////////////////////\n//                                                                           //\n// packages/peerlibrary:blocking/server.js                                   //\n//                                                                           //\n///////////////////////////////////////////////////////////////////////////////\n                                                                             //\nvar Future = Npm.require('fibers/future');                                   // 1\n                                                                             // 2\n// Inside blocking context functions should not be throwing exceptions but   // 3\n// call callback with first argument an error. Exceptions will not propagate // 4\n// and will only be printed to the console.                                  // 5\nblocking = function (obj, fun) {                                             // 6\n  if (!fun) {                                                                // 7\n    fun = obj;                                                               // 8\n    obj = undefined;                                                         // 9\n  }                                                                          // 10\n  var f = function () {                                                      // 11\n    if (_.isUndefined(obj)) {                                                // 12\n      obj = this;                                                            // 13\n    }                                                                        // 14\n    var args = _.toArray(arguments);                                         // 15\n    var future = new Future();                                               // 16\n    fun.apply(obj, args.concat(future.resolver()));                          // 17\n    return future.wait();                                                    // 18\n  };                                                                         // 19\n  f._blocking = true;                                                        // 20\n  return f;                                                                  // 21\n};                                                                           // 22\n                                                                             // 23\n///////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}